openapi: 3.0.2
info:
  title: CommandersAct API
  contact:
    name: Commanders Act
    url: 'https://platform.commandersact.com'
    email: support@commandersact.com
  description: >-
    ## Informations

    This is the CommandersAct API Documentation.<br> This API uses <a
    href="http://jsonapi.org/" target="blank">JSONAPI</a> specification to
    fetch, create and modify the resources, and to format responses.

    It is highly recommended that you send multiple objects in one HTTP request.
    This API allows streaming using newline separated JSON format or <a
    href="http://ndjson.org/" target="blank">ndjson</a>

    ## Rate-limits

    - You may send up to 30 requests per second

    - You may have up to 30 concurrent connections

    - If you send many conversions/products/etc. in bulk, the upload speed will
    be limited to 30 conversions/products/etc. per second

    ### Rate limiting examples

    - If you send 1 conversion per request you will be limited to 30 requests
    per second

    - If you send 90 conversions in one request your upload will be completed in
    about 3 seconds

    - If you send 40 requests, each with one conversion in the same second, 30
    of them will be processed and 10 of them will be rejected

    - If you send 3 requests, each with 100 conversions they will be completed
    in 10 seconds

    ## Date formats

    Use the long format with timezone for passing ISO-8601 dates. The following
    formats are accepted:

    - "2019-04-29T13:47:47.315Z"

    - "2019-04-29T13:47:47Z"

    - "2019-04-29T13:47:47.315+02:00"

    - "2019-04-29T13:47:47+02:00"

    ## Errors

    Errors are always returned as an array of objects in the top-level "errors"
    property.

    ### Errors in bulk operations

    For bulk operations you may have "errors" and "data" properties at the same
    time since some objects may have errors while others may not.  Bulk errors
    are aggregated which means there won't be an error for each instance of an
    error but one error for each type of error with the number of occurrences
    and some examples of line numbers or ids.

        {
          "errors": [
            {
              "code": "YOU_CAN_CHECK_THIS_IN_CODE",
              "detail": "This explains the error",
              "meta": {
                "context_property_example": "value_example",
                "error_count": 3,
                "line_numbers": [34, 45],
                "ids": [
                  "c9017b85-8016-4f13-88b4-18d57c67b866",
                  "12e0c3cb-7e8d-462f-9232-f7c61a900738"
                ]
              }
            }
          ]
          "data": {
            "accepted_object_count": 4,
            "rejected_object_count": 3
          }
        }

    ### Error object

    Error objects have the following properties <table>
      <tr>
        <th>Property</th>
        <th>Type</th>
        <th>Required</th>
        <th>Description</th>
      </tr>
      <tr>
        <td>code</td>
        <td>string</td>
        <td>true</td>
        <td>
          Always present and contains error code that can be checked programmatically
        </td>
      </tr>
      <tr>
        <td>detail</td>
        <td>string</td>
        <td>true</td>
        <td>
          Human readable message that explains the problem. You should not check the value of this property programmatically because it may change
        </td>
      </tr>
      <tr>
        <td>meta</td>
        <td>object</td>
        <td>false</td>
        <td>
          Error specific object that contains details about what generated the error
        </td>
      </tr>
    </table>
  version: 2.0.0
  x-logo:
    url: ./static/img/ca-logo.jpg
    altText: CommandersAct
    href: 'https://platform.commandersact.com'
servers:
  - url: 'https://api.commander1.com/v2/{siteId}'
    description: Production server
    variables:
      siteId:
        default: '7'
        description: this value is your site ID
  - url: 'https://api.local.commandersact.com/v2/{siteId}'
    description: Development server
    variables:
      siteId:
        default: '7'
        description: this value is your site ID
components:
  schemas:
    AmsUniverse:
      required:
        - name
      description: |
        Universe Schema
      type: object
      properties:
        name:
          type: string
          maxLength: 255
        created-at:
          type: string
          format: date-time
        updated-at:
          type: string
          format: date-time
      example:
        name: Traffic
        created-at: '2018-05-23T14:09:37+00:00'
        updated-at: '2018-05-23T14:09:37+00:00'
    AmsReport:
      required:
        - label
      description: |
        Report Schema
      type: object
      properties:
        public_id:
          type: string
          maxLength: 255
        label:
          type: string
          maxLength: 255
        description:
          type: string
          maxLength: 255
        status:
          type: string
          maxLength: 255
        category_id:
          type: integer
        created_by:
          type: integer
        updated_by:
          type: integer
          nullable: true
        is_archived:
          type: integer
        id_deleted:
          type: integer
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
      example: null
    DmsUniverse: &ref_8
      required:
        - name
      description: |
        Universe Schema
      properties:
        parent_id:
          type: integer
          nullable: true
        name:
          type: string
          maxLength: 255
        type_es:
          type: string
          maxLength: 255
        is_exportable:
          type: integer
        is_segmentable:
          type: integer
        is_manageable:
          type: integer
        reconciliate:
          type: integer
        order:
          type: integer
        base_id:
          type: integer
          nullable: true
        conditions:
          type: string
          maxLength: 255
          nullable: true
        created_at:
          type: string
          format: date-time
        created_by:
          type: integer
          nullable: true
        updated_at:
          type: string
          format: date-time
          nullable: true
        updated_by:
          type: integer
          nullable: true
        deleted_at:
          type: string
          format: date-time
          nullable: true
      example: &ref_9
        parent_id: 123456789
        name: visitor
        type_es: user
        is_exportable: 1
        is_segmentable: 1
        is_manageable: 1
        reconciliate: 0
        order: 1
        base_id: 987654321
        condition: null
        created_at: '2018-05-23T14:09:37+00:00'
        created_by: 12345
        updated_at: '2018-05-23T14:09:37+00:00'
        updated_by: 23456
        deleted_at: '2018-05-23T14:09:37+00:00'
    AmsDimension:
      required:
        - name
      description: |
        Dimension Schema
      type: object
      properties:
        name:
          type: string
          maxLength: 255
        created-at:
          type: string
          format: date-time
        updated-at:
          type: string
          format: date-time
      example: null
    DmsAddress: &ref_0
      required:
        - full_address
      description: >-
        It is recommended to use as many fields as you can in order to be able
        to build good segments with advanced conditions
      type: object
      properties:
        country:
          type: string
          description: Readable country name
          maxLength: 255
        iso_country_code:
          type: string
          description: ISO-3166 country code
          format: ISO-3166
          maxLength: 255
        country_code:
          type: string
          description: Use this field in case you use country codes other than ISO-3166
          maxLength: 255
        region:
          type: string
          description: Administrative region
          maxLength: 255
        locality:
          type: string
          description: Name of city/town/village etc.
          maxLength: 255
        postal_code:
          type: string
          description: Postal code
          maxLength: 255
        recipient:
          type: string
          description: Recipient name
          maxLength: 255
        street_address:
          type: string
          description: 'Street name, street number, building number etc.'
          maxLength: 255
        full_address:
          type: string
          description: >-
            Full address as a string that can contain newlines. Not usable in
            segmentation but available for exports
          maxLength: 255
        label:
          type: string
          description: 'Label for this address (home, work etc.)'
          maxLength: 255
        coordinates:
          type: object
          description: Coordinates for this address
          properties:
            latitude:
              description: Latitude
              type: number
            longitude:
              description: Longitude
              type: number
      example: &ref_2
        country: France
        iso_country_code: FR
        country_code: FRA
        region: Ile-de-France
        locality: Paris
        postal_code: '75009'
        recipient: Commanders Act
        street_address: 3-5 Rue Saint-Georges
        full_address: Commanders Act 3-5 Rue Saint-Georges 75009 Paris
        label: home
        coordinates:
          latitude: 48.857764
          longitude: 2.33935
    DmsConversion: &ref_19
      required:
        - id
        - user
        - type
        - status
        - created
        - currency
        - conversion_items
      description: >-
        It is recommended to use as many fields as you can in order to be able
        to build good segments with advanced conditions
      type: object
      properties:
        id:
          type: string
          description: Conversion id. Used as key for updates
          maxLength: 50
        user:
          type: object
          description: >-
            All properties that you add here will be used as conditions for
            matching users in our database. You must ensure that values used
            inside these properties are unique. Use same property names as those
            defined in variables interface for the user.
          properties:
            user_email:
              type: string
              description: Email of the user
              maxLength: 255
        type:
          type: string
          description: 'Type of conversion (online, offline, call etc.)'
          maxLength: 255
        status:
          type: string
          description: Status of your conversion (see list of possible values below)
          enum:
            - canceled
            - delivered
            - in_progress
            - partially_delivered
            - partially_returned
            - partially_shipped
            - pending_shipment
            - returned
            - shipped
          maxLength: 20
        created:
          type: string
          format: date-time
          description: >-
            Time when conversion occurred. See "Date formats" section above for
            a list of allowed formats.
        updated:
          type: string
          format: date-time
          description: >-
            Time when conversion was updated. See "Date formats" section above
            for a list of allowed formats.
        acknowledged:
          type: boolean
          description: Set to true if conversion was acknowledged
        currency:
          type: string
          description: Currency
          format: ISO-4217
          maxLength: 255
        comment:
          type: string
          description: Comment of the buyer
          maxLength: 255
        billing_address: *ref_0
        contact_address: *ref_0
        shipping_address: *ref_0
        shipping_provider:
          type: string
          description: Shipping provider
          maxLength: 255
        shipping_tracking_code:
          type: string
          description: Shipping tracking code
          maxLength: 255
        payment_method:
          type: string
          enum:
            - by_bank_transfer_in_advance
            - by_invoice
            - card
            - check_in_advance
            - cod
            - coupon
            - direct_debit
            - online_payment_system
            - other
          description: Payment method type (see list of possible values below)
          maxLength: 30
        payment_provider:
          type: string
          description: Payment provider used for this transaction
          maxLength: 255
        original_quantity:
          type: number
          description: Sum of all articles in the original conversion (CALCULATED)
          readOnly: true
        cancelled_quantity:
          type: number
          description: Quantity of cancelled articles in the conversion (CALCULATED)
          readOnly: true
        returned_quantity:
          type: number
          description: Quantity of returned articles in the conversion (CALCULATED)
          readOnly: true
        exchanged_quantity:
          type: number
          description: Quantity of exchanged articles in the conversion (CALCULATED)
          readOnly: true
        final_quantity:
          type: number
          description: >-
            Quantity of articles in final transaction for this conversion
            (original_quantity - cancelled_quantity - returned_quantity -
            exchanged_quantity) (CALCULATED)
          readOnly: true
        original_amount:
          type: number
          description: >-
            Original amount for this conversion (shipping price and taxes
            included)
        cancelled_amount:
          type: number
          description: Cancelled amount for this conversion
        returned_amount:
          type: number
          description: Returned amount for this conversion
        exchanged_amount:
          type: number
          description: Exchanged amount for this conversion
        shipping_amount:
          type: number
          description: Shipping amount for this conversion
        discount_amount:
          type: number
          description: Discount amount for this conversion
        tax_amount:
          type: number
          description: Tax amount for this conversion
        final_amount:
          type: number
          description: >
            Final amount for this conversion after returns, exchanges,
            cancellations etc. (shipping price and taxes included). This
            represents the overall transaction amount between the buyer and the
            seller
        custom:
          type: object
          description: Object containing custom properties
        conversion_items:
          type: array
          description: >-
            List of products in the conversion + their own attributes. You
            cannot have the same product twice inside a conversion unless you
            provide a conversion item id
          items: &ref_4
            required:
              - id
              - original_quantity
              - product
            description: >-
              It is recommended to use as many fields as you can in order to be
              able to build good segments with advanced conditions
            type: object
            properties:
              id:
                type: string
                description: >
                  Id of this item in the conversion. This id is required. If you
                  don't have an item id in your database and the same product id
                  cannot repeat within a conversion you can use the product id
                  as value. This field is used for identifying the item in
                  updates.
                maxLength: 64
              original_quantity:
                type: number
                description: Quantity of items in the original conversion
              cancelled_quantity:
                type: number
                description: Quantity of cancelled items
                default: 0
              returned_quantity:
                type: number
                description: Quantity of returned items
                default: 0
              exchanged_quantity:
                type: number
                description: Quantity of exchanged items
                default: 0
              final_quantity:
                type: number
                description: >-
                  Quantity of items in final transaction (original_quantity -
                  cancelled_quantity - returned_quantity - exchanged_quantity)
              original_amount:
                type: number
                description: Original amount for this item
              cancelled_amount:
                type: number
                description: Cancelled amount for this item
              returned_amount:
                type: number
                description: Returned amount for this item
              exchanged_amount:
                type: number
                description: Exchanged amount for this item
              final_amount:
                type: number
                description: >-
                  Final amount for this item (original_amount - cancelled_amount
                  - returned_amount - exchanged_amount)
              price:
                type: number
                description: Price of item (using same currency as for conversion)
              original_item:
                type: boolean
                description: >-
                  Wether this item was present in the original conversion. This
                  is automatically set to false to all items added in conversion
                  updates
              custom:
                type: object
                description: Object containing custom properties
              product: &ref_5
                required:
                  - id
                description: >
                  There are three ways to have product information in your
                  conversion items. First method is to put product properties
                  inline for each conversion item. Second method is to
                  synchronize your product catalog with our database using "POST
                  /products/bulk" endpoint and only send product ids in
                  conversion items (our server will copy product properties from
                  catalog). Third method is a combination of previous ones and
                  implies having a product catalog and send the product
                  information inline. In case a property is present in both
                  catalog product and inline product, properties from inline
                  product will overwrite properties from catalog. This method is
                  useful when product information is incomplete or complementary
                  in inline products.

                  It is recommended to send products inline, except when you do
                  not have all product information. In most cases you don't need
                  to use the catalog. It is recommended to use as many fields as
                  you can in order to be able to build good segments with
                  advanced conditions.

                  When you only send the id of the product in a conversion item,
                  you need to make sure that your catalog already contains the
                  product, otherwise product properties will not be added to
                  your conversion item.
                type: object
                properties:
                  id:
                    type: string
                    description: >
                      Unique identifier for the article (try using the most
                      specific identifier or SKU), such as a reference. If there
                      are several occurrences for the same identifier, only the
                      last one will be recorded
                    maxLength: 50
                  name:
                    type: string
                    description: Name of the article
                    maxLength: 500
                  description:
                    type: string
                    description: Description of the article
                    maxLength: 5000
                  category_1:
                    type: string
                    description: Main category of the article
                    maxLength: 250
                  category_2:
                    type: string
                    description: Second sub-category of the article
                    maxLength: 250
                  category_3:
                    type: string
                    description: Third  sub-category of the article
                    maxLength: 250
                  category_4:
                    type: string
                    description: Fourth sub-category of the article
                    maxLength: 250
                  category_5:
                    type: string
                    description: >
                      Fifth sub-category of the article. If you have more than
                      five levels of category you may choose to concatenate the
                      remaining ones like 'Bikes/Parts/Wheels/Front' or simply
                      ignore the remaining ones like 'Bikes', depending on your
                      segmentation needs.
                    maxLength: 250
                  tags:
                    type: array
                    description: >-
                      Array of tags for the product. Tags can be anything that
                      labels the product: hand-made, eco-friendly,
                      heat-resistant etc.
                    items:
                      type: string
                      maxLength: 250
                  condition:
                    type: string
                    enum:
                      - new
                      - refurbished
                      - used
                    description: >-
                      Current status of the material in your store (see list of
                      possible values below)
                  availability:
                    type: string
                    enum:
                      - in_stock
                      - available
                      - pre_order
                      - out_of_stock
                    description: >-
                      Current availability of the item in your store. Make sure
                      to indicate the availability of the item on your store
                      page and keep it up to date (see list of possible values
                      below)
                  availability_date:
                    type: string
                    description: >-
                      Date when product became or will become available. See
                      "Date formats" section above for a list of allowed
                      formats.
                    format: date-time
                    maxLength: 255
                  expiration_date:
                    type: string
                    description: >-
                      Date when product became or will become unavailable. See
                      "Date formats" section above for a list of allowed
                      formats.
                    format: date-time
                    maxLength: 255
                  price:
                    type: number
                    description: >-
                      Default price for the article. In a conversion you can
                      specify the real price at which the item was sold in case
                      of sales, discounts etc.
                  sale_price:
                    type: number
                    description: >-
                      Default price for the article during sales periods. In a
                      conversion you can specify the real price at which the
                      item was sold in case of discounts
                  currency:
                    type: string
                    description: >-
                      Currency used for given prices. Note that you have to use
                      the same currency for products and conversions
                    format: ISO-4217
                    maxLength: 250
                  image_link:
                    type: string
                    description: URL of product image
                    maxLength: 2000
                    format: url
                  link:
                    type: string
                    description: URL to the website where you can buy the item
                    maxLength: 2000
                    format: url
                  brand:
                    type: string
                    description: Brand of the article
                    maxLength: 255
                  width:
                    type: number
                    description: Width of the article in centimeters (cm)
                  length:
                    type: number
                    description: Length of the article in centimeters (cm)
                  height:
                    type: number
                    description: Height of the article in centimeters (cm)
                  weight:
                    type: number
                    description: Height of the article in centimeters (grams)
                  size:
                    type: string
                    description: >-
                      Size of the article when width, height and lengts are not
                      applicable. You can use any value that describes the size.
                      Examples: S, XL, large
                    maxLength: 255
                  colors:
                    type: array
                    description: Colors of product
                    items:
                      type: string
                      maxLength: 255
                  gender:
                    type: string
                    description: Gender for gender specific products
                    maxLength: 255
                  gtin:
                    type: string
                    description: >
                      International trade identification number of the article
                      Supported numbers: UPC (North America, 12 digits), EAN
                      (Europe, 13 digits), JAN (Japan, 8 to 13 digits), ISBN
                      (books, 13 digits)
                    maxLength: 255
                  mpn:
                    type: string
                    maxLength: 255
                    description: Manufacturer part number of the material
                  custom:
                    type: object
                    description: Object containing custom properties
                example: &ref_1
                  id: db050bb1-810d-4420-a6fb-c1ce472a4ca9
                  name: Mug Commanders Act
                  description: >-
                    White stoneware mug with C-Handle is the perfect cup for any
                    beverage
                  category_1: Home
                  category_2: Kitchen
                  category_3: Accessories
                  category_4: Containers
                  category_5: Mugs
                  tags:
                    - mugs
                    - handle
                    - white
                    - brand
                  condition: new
                  availability: in_stock
                  availability_date: '2019-02-06T17:41:31.427+01:00'
                  expiration_date: '2019-02-06T17:41:31.427+01:00'
                  price: 10
                  sale_price: 8
                  currency: EUR
                  image_link: 'https://commandersact.com/images/shopping/mug_hi_res.jpg'
                  link: 'https://commandersact.com/shopping/mug'
                  brand: Commanders Act
                  width: 6.4
                  length: 7.3
                  height: 9.5
                  weight: 80.7
                  size: medium
                  colors:
                    - white
                    - red
                  gtin: '134588842456789000'
                  mpn: '134588842'
                  custom:
                    internal_category_id: 721
                    warehouse: building B
                    box_barcode: 1830135586179
            example: &ref_3
              id: 68cd1310-4b7a-454c-99fb-2510f0e156ec
              original_quantity: 3
              cancelled_quantity: 1
              returned_quantity: 1
              exchanged_quantity: 0
              final_quantity: 1
              original_amount: 30
              cancelled_amount: 10
              returned_amount: 10
              exchanged_amount: 0
              final_amount: 10
              price: 10
              original_item: true
              custom:
                remarketing_campaign: christmas_2018
                time_to_checkout: 25 minutes
                ab_testing_group: 3245fcda
              product: *ref_1
      example: &ref_20
        id: db050bb1-810d-4420-a6fb-c1ce472a4ca9
        user:
          user_email: user@example.com
        type: offline
        status: in_progress
        created: '2018-01-01T20:00:00.000+01:00'
        updated: '2018-01-01T20:00:00.000+01:00'
        acknowledged: true
        currency: EUR
        comment: Package needs to be smaller than 30cm by 30cm
        billing_address: *ref_2
        contact_address: *ref_2
        shipping_address: *ref_2
        shipping_provider: UPS
        shipping_tracking_code: 702c7a16-2c3d-4946-bb35-69ba540773f6
        payment_method: card
        original_quantity: 3
        cancelled_quantity: 1
        returned_quantity: 1
        exchanged_quantity: 0
        final_quantity: 1
        original_amount: 30
        cancelled_amount: 10
        returned_amount: 10
        exchanged_amount: 0
        shipping_amount: 0
        discount_amount: 0
        tax_amount: 5
        final_amount: 10
        custom:
          internal_reference: fa34dc2
          referer: user@example.com
          website_version: '2.4'
        conversion_items:
          - *ref_3
          - *ref_3
    DmsConversionItem: *ref_4
    DmsProduct: *ref_5
    TmsWebDatalayerVariables:
      required: &ref_21
        - name
      description: |
        Tag web datalayer variables
      properties: &ref_22
        name:
          type: string
          maxLength: 255
          description: Must be formatted as a JavaScript object attribute
        type:
          type: string
          nullable: true
          enum:
            - Order ID / Basket ID
            - Order amount
            - User ID
            - Order email
            - Percentage %
            - Date DD/MM/YYYY
            - Currency (ISO 4217)
            - Do not track privacy
            - Two-dimensional array
            - Product ID
            - Alphanumeric & special chars
            - Product name
            - Basic array
            - Date YYYYMMDD
            - Date DD-MM-YYYY
            - Boolean
        use_in_noscript:
          type: boolean
          deprecated: true
        description:
          type: string
          maxLength: 65535
          nullable: true
        detailed_description:
          type: string
          maxLength: 65535
          nullable: true
      example: &ref_23
        name: myVariable
        type: Alphanumeric & special chars
        use_in_noscript: false
        description: lipsum
        detailed_description: lorem ipsum
    TmsWebInternalVariables:
      required: &ref_27
        - name
        - value
      description: |
        Tag web internal variables
      properties: &ref_28
        name:
          type: string
          maxLength: 255
          description: Must be formatted as a JavaScript object attribute
        value:
          type: string
          maxLength: 16777215
          description: >-
            JavaScript code of the variable, including definition of
            `tC.internalvars.name` property
        type:
          type: string
          nullable: true
          enum:
            - Order ID / Basket ID
            - Order amount
            - User ID
            - Order email
            - Percentage %
            - Date DD/MM/YYYY
            - Currency (ISO 4217)
            - Do not track privacy
            - Two-dimensional array
            - Product ID
            - Alphanumeric & special chars
            - Product name
            - Basic array
            - Date YYYYMMDD
            - Date DD-MM-YYYY
            - Boolean
        description:
          type: string
          maxLength: 65535
          nullable: true
        detailed_description:
          type: string
          maxLength: 65535
          nullable: true
      example: &ref_29
        name: myVariable
        value: >
          tC.internalvars.name =(function(){ tC.internalvars.toto =
          document.location.href.split('?');
            return tC.internalvars.toto[0];
          })();
        type: Currency (ISO 4217)
        description: lipsum
        detailed_description: lorem ipsum
    TmsServersideDatalayerVariables:
      required: &ref_34
        - name
      description: |
        Tag server-side datalayer variables
      properties: &ref_35
        name:
          type: string
          maxLength: 255
          description: Must be formatted as a JavaScript object attribute
        data_saver:
          type: boolean
          nullable: true
        reconciliation_key:
          type: boolean
          nullable: true
        variable_parameter:
          type: string
          maxLength: 65535
        description:
          type: string
          maxLength: 65535
          nullable: true
        detailed_description:
          type: string
          maxLength: 65535
          nullable: true
      example: &ref_36
        name: myVariable
        data_saver: true
        reconciliation_key: false
        variable_parameter: variableParam
        description: lipsum
        detailed_description: lorem ipsum
    TmsServersideInternalVariables:
      required: &ref_39
        - name
        - value
      description: |
        Tag internal variables
      properties: &ref_40
        name:
          type: string
          maxLength: 255
          description: Must be formatted as a JavaScript object attribute
        value:
          type: object
          description: >-
            Object containing all datas to properly calculate the mapping of an
            existing variable
          required:
            - variable_to_map
            - mapping
          properties:
            variable_to_map:
              type: string
              description: Name of a server-side variable (datalayer or internal variable)
            mapping:
              type: array
              items:
                type: object
                description: >-
                  List of switch cases to use in order to map the variable
                  ("output" key without "input" key means we are in `default`
                  case)
                required:
                  - output
                properties:
                  input:
                    type: string
                  output:
                    type: string
        description:
          type: string
          maxLength: 65535
          nullable: true
        detailed_description:
          type: string
          maxLength: 65535
          nullable: true
      example: &ref_41
        name: stringifiedBoolean
        value:
          variable_to_map: booleanToStringify
          mapping:
            - input: '0'
              output: 'false'
            - input: '1'
              output: 'true'
            - output: non-boolean entry
        description: lipsum
        detailed_description: lorem ipsum
    TmsWebTriggers:
      required: &ref_42
        - name
        - type
      description: |
        Tag Web triggers
      properties: &ref_43
        name:
          type: string
          maxLength: 255
        type:
          type: string
          enum:
            - container_loaded
            - dom_ready
            - click
            - form_submission
            - scroll
            - custom
        css_selector:
          description: >
            Required for `type=click` | `type=form_submission` (not available
            for other types)
          type: string
        horizontal_pct:
          description: >
            `type=scroll` only. At least one of `horizontal_pct` |
            `vertical_pct` | `horizontal_px` | `vertical_px` is required (but
            you may include up to one of each)
          type: integer
        vertical_pct:
          description: |
            `type=scroll` only
          type: integer
        horizontal_px:
          description: |
            `type=scroll` only
          type: integer
        vertical_px:
          description: |
            `type=scroll` only
          type: integer
        function_name:
          description: >
            Required for `type=custom` only (not available for other types).
            Will declare tC.event.\<function_name\>
          type: string
      example: &ref_44
        name: Click on button trigger
        type: click
        css_selector: '#myButton'
    TmsWebPerimeters: &ref_6
      required: &ref_51
        - type
        - label
      properties: &ref_52
        label:
          type: string
          maxLength: 255
        type:
          type: string
          enum:
            - variable_equal
            - variable_not_equal
            - variable_match
            - variable_not_match
            - variable_contain
            - variable_not_contain
            - variable_greater_than
            - variable_less_then
            - cookie_equal
            - cookie_not_equal
            - cookie_contain
            - cookie_not_contain
            - url_equal
            - url_not_equal
            - url_match
            - url_not_match
            - url_contain
            - url_not_contain
            - browser_is
            - browser_is_not
            - sampling_page
            - sampling_session
            - sampling_visitor
            - custom
        pattern:
          type: string
          description: Required for `type=variable_*`|`type=cookie_*`|`type=url_*`
          maxLength: 255
        cookie_name:
          type: string
          description: Required for `type=cookie_*`
          maxLength: 255
        browser_list:
          type: array
          description: Required for `type=browser_*`
          items:
            type: string
            enum:
              - chrome
              - firefox
              - opera
              - internet_explorer
              - safari
              - edge
        frequency:
          type: integer
          description: Required for `type=sampling_*`
        js_code:
          type: string
          maxLength: 4096
          description: 'JavaScript code of the rule, required for `type=custom`'
      example: &ref_53
        label: my_variable_rule
        type: variable_equal
        pattern: foobar
    TmsWebConstraints: *ref_6
    TmsServersideConstraints:
      required: &ref_62
        - label
        - type
        - pattern
      properties: &ref_63
        label:
          type: string
          maxLength: 255
        type:
          type: string
          enum:
            - variable_equal
            - variable_get_not_equal
            - variable_post_not_equal
            - variable_match
            - variable_contain
            - variable_not_contain
            - variable_greater_than
            - variable_less_then
            - variable_exist
            - variable_not_exist
        pattern:
          type: string
          maxLength: 255
      example: &ref_64
        label: my_variable_rule
        type: variable_equal
        pattern: foobar
    AdminWorkspace:
      required: &ref_67
        - name
      properties: &ref_68
        name:
          type: string
          maxLength: 255
        currency:
          type: string
          description: ISO 4217 currency alpha code
          minLength: 3
          maxLength: 3
          nullable: true
        timezone:
          type: string
          descrtiption: Timezone formatted according to the IANA Time Zone database
        ip_obfuscation:
          type: boolean
          description: >-
            Keep whole (`false`) or only a part (`true`) of IP address (used in
            DataCommander)
          default: true
        use_default_cdn:
          type: boolean
          description: Use Commanders Act CDN or not
      example: &ref_69
        name: My workspace
        currency: EUR
        timezone: Europe/Paris
        ip_obfuscation: false
        use_default_cdn: true
    TmsWebDatalayerVariableCategories:
      required: &ref_70
        - name
      properties: &ref_71
        name:
          type: string
          maxLength: 255
      example: &ref_72
        name: My web category
    TmsServersideDatalayerVariableCategories:
      required: &ref_73
        - name
      properties: &ref_74
        name:
          type: string
          maxLength: 255
      example: &ref_75
        name: My server-side category
    TmsWebContainers:
      required: &ref_78
        - name
      properties: &ref_79
        name:
          type: string
          maxLength: 255
        deployment_methods:
          type: array
          description: Methods to deploy containers
          items:
            type: string
            enum:
              - ftp_or_cdn
              - amazon_s3
              - batch
              - custom_url
              - manual
              - email
        add_unminified_version_for_manual_deploy:
          type: boolean
          description: Add unminified version of the container in manual deployment
          default: false
        include_md5_file_in_deployment_mail:
          type: boolean
          description: >-
            Include path of md5 file in email sent after container deployment
            (only used if "Email" is included in "sync_mode" parameter)
          default: false
        include_jquery_for_tests:
          type: boolean
          description: >-
            Include jQuery a automatic tests performed after container
            generation?
          default: false
        default_tags_lifetime:
          type: integer
          description: >-
            In months, allows to calculate the default expiration date when
            adding a tag (eg: if "default_tags_lifetime" equals 6, tags will
            automatically have an expiration date set to 6 months after the day
            they are added)
          enum:
            - 3
            - 6
            - 12
        force_cookie_samesite_setting:
          type: string
          description: >-
            By default ("unforced" value), SameSite setting is None for
            third-party cookies, Lax otherwise
          enum:
            - unforced
            - none
            - lax
          default: unforced
        force_cookie_secure_setting:
          type: string
          description: >-
            By default ("unforced" value), Secure setting is enabled for cookies
            with the SameSite=None attribute
          enum:
            - unforced
            - enabled
            - disabled
          default: unforced
      example: &ref_80
        name: My web container
        deployment_method:
          - ftp_or_cdn
          - amazon_s3
          - manual
        add_unminified_version_for_manual_deploy: false
        include_jquery_for_tests: true
        default_tags_lifetime: 12
        force_cookie_samesite_setting: none
        force_cookie_secure_setting: enable
    TmsServersideContainers:
      required: &ref_81
        - name
      properties: &ref_82
        name:
          type: string
          maxLength: 255
      example: &ref_83
        name: My server-side container
    TmsWebTags:
      required: &ref_84
        - name
      properties: &ref_85
        name:
          type: string
          maxLength: 255
        template_id:
          type: integer
        tag_code:
          type: string
          maxLength: 65535
          description: >-
            Tag code is *mandatory* if template_id parameter is not filled; when
            tag_code parameter is sent, javascript code must be embedded into
            HTML tag `<script type="text/javascript"></script>`
      example: &ref_86
        name: My tag
        tag_code: <script type="text/javascript">console.log("here is my tag");</script>
    TmsServersideTags:
      required: &ref_87
        - name
      properties: &ref_88
        name:
          type: string
          maxLength: 255
        template_id:
          type: integer
        destination_url:
          type: string
          maxLength: 65535
          description: Tag URL is *mandatory* if template_id parameter is not filled
        post_parameters:
          type: string
          maxLength: 65535
        headers:
          type: object
          description: >-
            List of HTTP headers to send with tag; lengths of keys & values must
            be shorter than 255 characters
      example: &ref_89
        name: My tag
        destination_url: 'http://yoururl.com'
        headers:
          header1: value1
          header2: value2
    PlatformIntegrations:
      required: &ref_90
        - label
        - integration_type
        - environment
        - version
        - has_undeployed_changes
        - health
        - trend
        - last_run
        - last_deployment
        - status
      properties: &ref_91
        label:
          type: string
          maxLength: 255
        integration_type:
          type: string
          enum:
            - sources
            - destinations
        environment:
          type: string
          enum:
            - prod
            - staging
        version:
          type: string
        has_undeployed_changes:
          type: boolean
        health:
          type: integer
          description: Between 1 and 100
        trend:
          type: array
          items:
            type: object
            description: Format to be defined
        last_run:
          type: integer
          description: timestamp
        last_deployment:
          type: integer
          description: timestamp
        status:
          type: string
          enum:
            - active
            - stopped
      example: &ref_92
        label: container body
        integration_type: sources
        environment: prod
        version: '2.00'
        has_undeployed_changes: true
        last_run: null
        last_deployment: 1643828424745
        health: 90
        status: active
        trend:
          - timestamp: 1111
            value: 90
          - timestamp: 1112
            value: 80
          - timestamp: 1113
            value: 85
    PlatformIntegrationTemplates:
      required: &ref_97
        - label
      properties: &ref_98
        label:
          type: string
          maxlength: 255
      example: &ref_99
        label: My template
    PlatformIntegrationCategories:
      required: &ref_100
        - label
        - position
        - types
      properties: &ref_101
        label:
          type: string
          maxlength: 255
        position:
          type: integer
        types:
          type: array
          enum:
            - destination
            - source
      example: &ref_102
        label: My category
        position: 1
        types: &ref_103
          - destination
          - source
    PlatformIntegrationRequests:
      required: &ref_106
        - type
        - name
        - url
        - purpose
      properties: &ref_107
        type:
          type: string
          enum:
            - destination
            - source
        name:
          type: string
          description: What tool would you like Commanders Act to integrate with?
        url:
          type: string
          description: What's the URL of the integration you're looking for?
        purpose:
          type: string
          description: What do you want to use this integration for?
      example: &ref_108
        type: destination
        name: My new destination
        url: www.commandersact.com
        purpose: This is a new integration
  parameters:
    UniverseInclude: &ref_7
      in: query
      name: include
      description: >
        > Relation available: [Parent](#tag/DmsUniverseModel) -
        [Base](#tag/DmsUniverseModel) - [Variables](#tag/DmsVariablesModel)
      schema:
        type: array
        items:
          type: string
          enum:
            - parent
            - base
            - variables
      explode: false
      style: form
      example:
        - parent
        - variables
    PathId: &ref_14
      in: path
      name: id
      description: Resource ID
      required: true
      schema:
        type: integer
        example: 1
    DataApiAuthentication:
      name: Authorization
      description: Authorization token
      in: header
      required: true
      schema:
        type: string
        example: Bearer NJtcKaoCYu...mGZDxRgMBMUw==
      examples:
        '202':
          value: Bearer WORKING_TOKEN
        '401':
          value: INVALID_TOKEN
  relationships:
    AdminCustomer:
      properties: &ref_65
        type: object
        required:
          - data
        properties:
          data:
            type: object
            required:
              - type
              - id
            properties:
              type:
                type: string
                enum:
                  - customer
              id:
                type: integer
      example: &ref_66
        data:
          type: customer
          id: 1
    AdminUser:
      properties: &ref_76
        type: object
        required:
          - data
        properties:
          data:
            type: object
            required:
              - type
              - id
            properties:
              type:
                type: string
                enum:
                  - user
              id:
                type: integer
      example: &ref_77
        data:
          - type: user
            id: 1
          - type: user
            id: 2
    TmsWebContainer:
      properties: &ref_45
        type: object
        required:
          - data
        properties:
          data:
            type: object
            required:
              - type
              - id
            properties:
              type:
                type: string
                enum:
                  - tms/web-containers
              id:
                type: integer
      example: &ref_47
        data:
          type: tms/web-containers
          id: 1
      multi:
        properties: &ref_33
          type: object
          required: &ref_30
            - data
          properties: &ref_31
            data:
              type: array
              required:
                - type
                - id
              items:
                type: object
                properties:
                  type:
                    type: string
                    enum:
                      - tms/containers
                  id:
                    type: integer
        example: &ref_32
          data:
            - type: tms/containers
              id: 1
            - type: tms/containers
              id: 3
    TmsWebTrigger:
      properties: &ref_54
        type: object
        required:
          - data
        properties:
          data:
            type: object
            required:
              - type
              - id
            properties:
              type:
                type: string
                enum:
                  - tms/web-triggers
              id:
                type: integer
      example: &ref_55
        data:
          type: web-triggers
          id: 1
    TmsServersideContainer:
      properties: &ref_56
        type: object
        required:
          - data
        properties:
          data:
            type: object
            required:
              - type
              - id
            properties:
              type:
                type: string
                enum:
                  - tms/serverside-containers
              id:
                type: integer
      example: &ref_59
        data:
          type: tms/serverside-containers
          id: 1
    TmsServersideVariable:
      properties: &ref_58
        type: object
        required:
          - data
        properties:
          data:
            type: object
            required:
              - type
              - id
            properties:
              type:
                type: string
                enum:
                  - tms/serverside-datalayer-variables
                  - tms/serverside-internal-variables
              id:
                type: integer
      example: &ref_61
        data:
          type: serverside-datalayer-variables
          id: 1
    TmsServersideTag:
      properties:
        type: object
        required:
          - data
        properties:
          data:
            type: object
            properties:
              type:
                type: string
                enum:
                  - tms/serverside-tags
              id:
                type: integer
      example:
        data:
          type: tms/serverside-tags
          id: 1
      multi:
        properties: &ref_57
          type: object
          required:
            - data
          properties:
            data:
              type: array
              required:
                - type
                - id
              items:
                type: object
                properties:
                  type:
                    type: string
                    enum:
                      - tms/serverside-tags
                  id:
                    type: integer
        example: &ref_60
          data:
            - type: tms/serverside-tags
              id: 1
            - type: tms/serverside-tags
              id: 3
    TmsWebTag:
      properties:
        type: object
        required:
          - data
        properties:
          data:
            type: object
            properties:
              type:
                type: string
                enum:
                  - tms/web-tags
              id:
                type: integer
      example:
        data:
          type: tms/web-tags
          id: 1
      multi:
        properties: &ref_46
          type: object
          required:
            - data
          properties:
            data:
              type: array
              required:
                - type
                - id
              items:
                type: object
                properties:
                  type:
                    type: string
                    enum:
                      - tms/web-tags
                  id:
                    type: integer
        example: &ref_48
          data:
            - type: tms/web-tags
              id: 1
            - type: tms/web-tags
              id: 3
    TmsWebVariable:
      properties: &ref_49
        type: object
        required:
          - data
        properties:
          data:
            type: object
            required:
              - type
              - id
            properties:
              type:
                type: string
                enum:
                  - tms/web-datalayer-variables
                  - tms/web-internal-variables
              id:
                type: integer
      example: &ref_50
        data:
          type: web-datalayer-variables
          id: 1
    TmsWebDatalayerVariableCategory:
      properties: &ref_24
        type: object
        required:
          - data
        properties:
          data:
            type: object
            required:
              - type
              - id
            properties:
              type:
                type: string
                enum:
                  - tms/web-datalayer-variable-categories
              id:
                type: integer
      example: &ref_25
        data:
          type: tms/web-datalayer-variable-categories
          id: 1
    TmsServersideDatalayerVariableCategory:
      properties: &ref_37
        type: object
        required:
          - data
        properties:
          data:
            type: object
            required:
              - type
              - id
            properties:
              type:
                type: string
                enum:
                  - tms/serverside-datalayer-variable-categories
              id:
                type: integer
      example: &ref_38
        data:
          type: tms/serverside-datalayer-variable-categories
          id: 1
    Destination:
      properties:
        type: object
        required:
          - data
        properties:
          data:
            type: object
            required:
              - type
              - id
            properties:
              type:
                type: string
                enum:
                  - tms/destinations
              id:
                type: integer
      example:
        data:
          type: tms/destinations
          id: 1
    Source:
      properties:
        type: object
        required:
          - data
        properties:
          data:
            type: object
            required:
              - type
              - id
            properties:
              type:
                type: string
                enum:
                  - tms/sources
              id:
                type: integer
      example:
        data:
          type: tms/sources
          id: 1
    Integration:
      properties:
        type: object
        required:
          - data
        properties:
          data:
            type: object
            required:
              - type
              - id
            properties:
              type:
                type: string
                enum:
                  - tms/integrations
              id:
                type: integer
      example:
        data:
          type: tms/integrations
          id: 1
      multi:
        properties: &ref_93
          type: object
          required:
            - data
          properties:
            data:
              type: array
              required:
                - type
                - id
              items:
                type: object
                properties:
                  type:
                    type: string
                    enum:
                      - tms/integrations
                  id:
                    type: integer
        example: &ref_94
          data:
            - type: tms/integrations
              id: 1
            - type: tms/integrations
              id: 3
    IntegrationTemplate:
      properties:
        type: object
        required:
          - data
        properties:
          data:
            type: object
            required:
              - type
              - id
            properties:
              type:
                type: string
                enum:
                  - integration-templates
              id:
                type: string
      example:
        data:
          type: integration-templates
          id: '1'
    IntegrationTrigger:
      properties:
        type: object
        required:
          - data
        properties:
          data:
            type: object
            required:
              - type
              - id
            properties:
              type:
                type: string
                enum:
                  - tms/integration-triggers
              id:
                type: integer
      example:
        data:
          type: tms/integration-triggers
          id: 1
    Segment:
      properties:
        type: object
        required:
          - data
        properties:
          data:
            type: object
            required:
              - type
              - id
            properties:
              type:
                type: string
                enum:
                  - tms/segments
              id:
                type: integer
      example:
        data:
          type: tms/segments
          id: 1
    PlatformIntegrationCategory:
      properties: &ref_95
        type: object
        required:
          - data
        properties:
          data:
            type: object
            required:
              - type
              - id
            properties:
              type:
                type: string
                enum:
                  - integration-categories
              id:
                type: string
      example: &ref_96
        data:
          type: integration-categories
          id: '1'
    PlatformIntegrationTemplate:
      properties: &ref_104
        type: object
        required:
          - data
        properties:
          data:
            type: object
            required:
              - type
              - id
            properties:
              type:
                type: string
                enum:
                  - integration-templates
              id:
                type: string
      example: &ref_105
        data:
          type: integration-templates
          id: '1'
  responses:
    '204': &ref_26
      description: Successful deletion
    '401': &ref_10
      description: Cannot identify the API caller
      content:
        application/vnd.api+json:
          examples:
            missing_header:
              description: 401 Authorization header is missing
              value:
                errors:
                  - title: MISSING_AUTHORIZATION_HEADER
                    detail: The "Authorization" header is required
            unknown_token_type:
              description: 401 Token type is missing
              value:
                errors:
                  - code: UNKNOWN_TOKEN_TYPE
                    detail: The token type is missing
            invalid_token_type:
              description: 401 The token type is invalid
              value:
                errors:
                  - code: INVALID_TOKEN_TYPE
                    detail: >-
                      The token type "Bear" is invalid. Expecting "Bearer"
                      instead
            unknown_token:
              description: 401 The provided token is unknown
              value:
                errors:
                  - code: UNKNOWN_TOKEN
                    detail: >-
                      The provided token is unknown. Please contact our support
                      team support@commandersact.com
    '403': &ref_11
      description: API caller does not have access to this resource
      content:
        application/vnd.api+json:
          example:
            errors:
              - code: SITE_ACCESS_FORBIDDEN
                detail: You cannot access this site
    '405': &ref_17
      description: Invalid input
    '429': &ref_12
      description: Too Many Requests
      content:
        application/vnd.api+json:
          schema:
            type: object
            properties:
              errors:
                type: array
                items:
                  type: object
                  properties:
                    code:
                      type: string
                    detail:
                      type: string
          examples:
            connection_limit_reached:
              value:
                description: You have too many open connections
                errors:
                  - code: CONNECTION_LIMIT_REACHED
                    detail: Your account is limited to 30 simultaneous connections
            request_limit_reached:
              value:
                description: You have reached the request limit
                errors:
                  - code: REQUEST_LIMIT_REACHED
                    detail: Your account is limited to 30 requests per second
    '500': &ref_13
      description: Internal server error
      content:
        application/json:
          example:
            errors:
              - code: SERVER_ERROR
                detail: >-
                  An internal error occurred. Please contact our support team
                  support@commandersact.com
    data_api_202: &ref_15
      description: All objects are accepted for processing
      content:
        application/json:
          example:
            data:
              accepted_object_count: 4
              rejected_object_count: 0
    data_api_400: &ref_16
      description: Cannot process request or part of the request due to client error
      content:
        application/json:
          examples:
            parse_error:
              description: 400 Cannot parse nd-json line
              value:
                errors:
                  - code: PARSE_ERROR
                    detail: Cannot parse nd-json
                data: {}
            missing_property:
              description: 400 Missing required property
              value:
                errors:
                  - code: MISSING_REQUIRED_PROPERTY
                    detail: |
                      should have required property 'id'
                    meta:
                      line_numbers:
                        - 34
                        - 45
                      error_count: 2
                      ids:
                        - c9017b85-8016-4f13-88b4-18d57c67b866
                        - 12e0c3cb-7e8d-462f-9232-f7c61a900738
                data:
                  accepted_object_count: 4
                  rejected_object_count: 2
            invalid_property_type:
              description: 400 Invalid property type
              value:
                errors:
                  - code: INVALID_PROPERTY_TYPE
                    detail: '"original_amount" property is not a number'
                    meta:
                      property: original_amount
                      line_numbers:
                        - 34
                        - 45
                      error_count: 2
                      ids:
                        - c9017b85-8016-4f13-88b4-18d57c67b866
                        - 12e0c3cb-7e8d-462f-9232-f7c61a900738
                data:
                  accepted_object_count: 4
                  rejected_object_count: 2
            invalid_property_format:
              description: 400 Invalid property format
              value:
                errors:
                  - code: INVALID_PROPERTY_FORMAT
                    detail: '"original_amount" property is not a number'
                    meta:
                      property: original_amount
                      line_numbers:
                        - 34
                        - 45
                      error_count: 2
                      ids:
                        - c9017b85-8016-4f13-88b4-18d57c67b866
                        - 12e0c3cb-7e8d-462f-9232-f7c61a900738
                data:
                  accepted_object_count: 4
                  rejected_object_count: 2
    data_api_415: &ref_18
      description: Unsupported Media Type
      content:
        application/vnd.api+json:
          example:
            errors:
              - code: UNSUPPORTED_HEADER
                detail: >-
                  Unsupported "content-type": "application/json". Expected
                  "content-type": "application/x-ndjson" with ndjson payload.
  securitySchemes:
    UserAuthentication:
      type: http
      description: >
        This authenticate user to use the API

        You MUST send the token for each request in the Authorization header.
        The token MUST be preceeded by Bearer.


        ```HTTP
            GET https://api.commander1.com/v2/{siteId}/users HTTP/1.1
            Host: api.commander1.com
            Authorization: Bearer {mySecretToken}
        ```

        > You should replace "\{mySecretToken\}" in example with your Token.


        > You should replace "\{siteId\}" in example with your Site ID.
      scheme: bearer
      bearerFormat: JWT
    DataAuthentication:
      type: http
      description: >
        This authenticate Data Account to use the API

        The API uses Token to authenticate its user.

        You MUST send the token for each request in the Authorization header.
        The token MUST be preceeded by Bearer.


        ```HTTP
            GET https://api.commander1.com/v2/{siteId}/users HTTP/1.1
            Host: api.commander1.com
            Authorization: Bearer {mySecretToken}
        ```

        > You should replace "\{mySecretToken\}" in example with your Token.


        > You should replace "\{siteId\}" in example with your Site ID.
      scheme: bearer
      bearerFormat: JWT
paths:
  /dms/universes:
    get:
      tags:
        - DmsUniverses
      summary: List Universes
      operationId: DmsUniversesIndex
      description: |
        DMS Universes description
      parameters:
        - *ref_7
        - in: query
          name: filter
          description: Filter available
          schema:
            type: object
            properties:
              manageable:
                type: integer
                example: 1
              exportable:
                type: integer
              withRelation:
                type: integer
          style: deepObject
          explode: true
          example:
            withRelation: true
            exportable: true
            manageable: true
      responses:
        '200':
          description: Successful
          content:
            application/vnd.api+json:
              schema: *ref_8
              example:
                data:
                  - type: dms/universe
                    id: '1'
                    attributes: *ref_9
        '401': *ref_10
        '403': *ref_11
        '429': *ref_12
        '500': *ref_13
      x-code-samples:
        - lang: Shell
          source: >-
            http GET
            'https://api.commander1.com/v2/REPLACE_SITEID/dms/universes?include=SOME_ARRAY_VALUE&filter=SOME_OBJECT_VALUE'
            \
              Authorization:'Bearer REPLACE_BEARER_TOKEN'
        - lang: Shell
          source: |-
            curl --request GET \
              --url 'https://api.commander1.com/v2/REPLACE_SITEID/dms/universes?include=SOME_ARRAY_VALUE&filter=SOME_OBJECT_VALUE' \
              --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'
        - lang: Node
          source: |-
            const http = require("https");

            const options = {
              "method": "GET",
              "hostname": "api.commander1.com",
              "port": null,
              "path": "/v2/REPLACE_SITEID/dms/universes?include=SOME_ARRAY_VALUE&filter=SOME_OBJECT_VALUE",
              "headers": {
                "Authorization": "Bearer REPLACE_BEARER_TOKEN"
              }
            };

            const req = http.request(options, function (res) {
              const chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                const body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.end();
    post:
      tags:
        - DmsUniverses
      summary: Create Universe
      operationId: DmsUniversesStore
      description: |
        DMS Universes description
      responses:
        '200':
          description: Successful
          content:
            application/vnd.api+json:
              schema: *ref_8
              example:
                data:
                  type: dms/universe
                  id: '1'
                  attributes: *ref_9
        '401': *ref_10
        '403': *ref_11
        '429': *ref_12
        '500': *ref_13
      x-code-samples:
        - lang: Shell
          source: >-
            http POST https://api.commander1.com/v2/REPLACE_SITEID/dms/universes
            \
              Authorization:'Bearer REPLACE_BEARER_TOKEN'
        - lang: Shell
          source: |-
            curl --request POST \
              --url https://api.commander1.com/v2/REPLACE_SITEID/dms/universes \
              --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'
        - lang: Node
          source: |-
            const http = require("https");

            const options = {
              "method": "POST",
              "hostname": "api.commander1.com",
              "port": null,
              "path": "/v2/REPLACE_SITEID/dms/universes",
              "headers": {
                "Authorization": "Bearer REPLACE_BEARER_TOKEN"
              }
            };

            const req = http.request(options, function (res) {
              const chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                const body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.end();
  '/dms/universes/{id}':
    get:
      tags:
        - DmsUniverses
      summary: Display one Universe
      operationId: DmsUniversesShow
      description: |
        DMS Universes description
      parameters:
        - *ref_7
        - *ref_14
      responses:
        '200':
          description: Successful
          content:
            application/vnd.api+json:
              schema: *ref_8
              example:
                data:
                  type: dms/universe
                  id: 1
                  attributes: *ref_9
        '401': *ref_10
        '403': *ref_11
        '429': *ref_12
        '500': *ref_13
      x-code-samples:
        - lang: Shell
          source: >-
            http GET
            'https://api.commander1.com/v2/REPLACE_SITEID/dms/universes/REPLACE_ID?include=SOME_ARRAY_VALUE'
            \
              Authorization:'Bearer REPLACE_BEARER_TOKEN'
        - lang: Shell
          source: |-
            curl --request GET \
              --url 'https://api.commander1.com/v2/REPLACE_SITEID/dms/universes/REPLACE_ID?include=SOME_ARRAY_VALUE' \
              --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'
        - lang: Node
          source: |-
            const http = require("https");

            const options = {
              "method": "GET",
              "hostname": "api.commander1.com",
              "port": null,
              "path": "/v2/REPLACE_SITEID/dms/universes/REPLACE_ID?include=SOME_ARRAY_VALUE",
              "headers": {
                "Authorization": "Bearer REPLACE_BEARER_TOKEN"
              }
            };

            const req = http.request(options, function (res) {
              const chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                const body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.end();
    patch:
      tags:
        - DmsUniverses
      summary: Update one Universe
      operationId: DmsUniversesUpdate
      description: |
        DMS Universes description
      parameters:
        - *ref_14
      responses:
        '200':
          description: Successful
          content:
            application/vnd.api+json:
              schema: *ref_8
              example:
                data:
                  type: dms/universe
                  id: '1'
                  attributes: *ref_9
        '401': *ref_10
        '403': *ref_11
        '429': *ref_12
        '500': *ref_13
      x-code-samples:
        - lang: Shell
          source: >-
            http PATCH
            https://api.commander1.com/v2/REPLACE_SITEID/dms/universes/REPLACE_ID
            \
              Authorization:'Bearer REPLACE_BEARER_TOKEN'
        - lang: Shell
          source: |-
            curl --request PATCH \
              --url https://api.commander1.com/v2/REPLACE_SITEID/dms/universes/REPLACE_ID \
              --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'
        - lang: Node
          source: |-
            const http = require("https");

            const options = {
              "method": "PATCH",
              "hostname": "api.commander1.com",
              "port": null,
              "path": "/v2/REPLACE_SITEID/dms/universes/REPLACE_ID",
              "headers": {
                "Authorization": "Bearer REPLACE_BEARER_TOKEN"
              }
            };

            const req = http.request(options, function (res) {
              const chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                const body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.end();
  /conversions/bulk:
    post:
      tags:
        - DmsConversions
      summary: Upsert conversions
      operationId: DmsConversionsStore
      description: >
        ### Usage

        This endpoint creates and updates conversion.

        Your request will be processed asynchronously. It can take up to 24
        hours until the request is processed and updates are made in the
        database.

        ### Rate-Limiting

        With the rate limiting, it is recommended to put a maximum of 1000 lines
        per request. Otherwise insertion can be too long and got a connection
        drop and the consistency of the data cannnot be accurate.

        ### Update

        When an item already exist, the api merge the old conversion and the new
        one. All properties that aren't set as read only will be update.
      responses:
        '202': *ref_15
        '400': *ref_16
        '401': *ref_10
        '403': *ref_11
        '405': *ref_17
        '415': *ref_18
        '429': *ref_12
        '500': *ref_13
      security:
        - DataAuthentication: []
      requestBody:
        required: true
        description: Conversions as newline delimited JSON strings
        content:
          application/x-ndjson:
            schema: *ref_19
            examples:
              200.main.ndjson:
                value:
                  - *ref_20
                  - *ref_20
                  - *ref_20
      x-code-samples:
        - lang: Shell
          source: >-
            echo
            '{"id":"db050bb1-810d-4420-a6fb-c1ce472a4ca9","user":{"user_email":"user@example.com"},"type":"offline","status":"in_progress","created":"2018-01-01T20:00:00.000+01:00","updated":"2018-01-01T20:00:00.000+01:00","acknowledged":true,"currency":"EUR","comment":"Package
            needs to be smaller than 30cm by
            30cm","billing_address":{"country":"France","iso_country_code":"FR","country_code":"FRA","region":"Ile-de-France","locality":"Paris","postal_code":"75009","recipient":"Commanders
            Act","street_address":"3-5 Rue
            Saint-Georges","full_address":"Commanders Act 3-5 Rue Saint-Georges
            75009
            Paris","label":"home","coordinates":{"latitude":48.857764,"longitude":2.33935}},"contact_address":{"country":"France","iso_country_code":"FR","country_code":"FRA","region":"Ile-de-France","locality":"Paris","postal_code":"75009","recipient":"Commanders
            Act","street_address":"3-5 Rue
            Saint-Georges","full_address":"Commanders Act 3-5 Rue Saint-Georges
            75009
            Paris","label":"home","coordinates":{"latitude":48.857764,"longitude":2.33935}},"shipping_address":{"country":"France","iso_country_code":"FR","country_code":"FRA","region":"Ile-de-France","locality":"Paris","postal_code":"75009","recipient":"Commanders
            Act","street_address":"3-5 Rue
            Saint-Georges","full_address":"Commanders Act 3-5 Rue Saint-Georges
            75009
            Paris","label":"home","coordinates":{"latitude":48.857764,"longitude":2.33935}},"shipping_provider":"UPS","shipping_tracking_code":"702c7a16-2c3d-4946-bb35-69ba540773f6","payment_method":"card","original_quantity":3,"cancelled_quantity":1,"returned_quantity":1,"exchanged_quantity":0,"final_quantity":1,"original_amount":30,"cancelled_amount":10,"returned_amount":10,"exchanged_amount":0,"shipping_amount":0,"discount_amount":0,"tax_amount":5,"final_amount":10,"custom":{"internal_reference":"fa34dc2","referer":"user@example.com","website_version":"2.4"},"conversion_items":[{"id":"68cd1310-4b7a-454c-99fb-2510f0e156ec","original_quantity":3,"cancelled_quantity":1,"returned_quantity":1,"exchanged_quantity":0,"final_quantity":1,"original_amount":30,"cancelled_amount":10,"returned_amount":10,"exchanged_amount":0,"final_amount":10,"price":10,"original_item":true,"custom":{"remarketing_campaign":"christmas_2018","time_to_checkout":"25
            minutes","ab_testing_group":"3245fcda"},"product":{"id":"db050bb1-810d-4420-a6fb-c1ce472a4ca9","name":"Mug
            Commanders Act","description":"White stoneware mug with C-Handle is
            the perfect cup for any
            beverage","category_1":"Home","category_2":"Kitchen","category_3":"Accessories","category_4":"Containers","category_5":"Mugs","tags":["mugs","handle","white","brand"],"condition":"new","availability":"in_stock","availability_date":"2019-02-06T17:41:31.427+01:00","expiration_date":"2019-02-06T17:41:31.427+01:00","price":10,"sale_price":8,"currency":"EUR","image_link":"https://commandersact.com/images/shopping/mug_hi_res.jpg","link":"https://commandersact.com/shopping/mug","brand":"Commanders
            Act","width":6.4,"length":7.3,"height":9.5,"weight":80.7,"size":"medium","colors":["white","red"],"gtin":"134588842456789000","mpn":"134588842","custom":{"internal_category_id":721,"warehouse":"building
            B","box_barcode":1830135586179}}},{"id":"68cd1310-4b7a-454c-99fb-2510f0e156ec","original_quantity":3,"cancelled_quantity":1,"returned_quantity":1,"exchanged_quantity":0,"final_quantity":1,"original_amount":30,"cancelled_amount":10,"returned_amount":10,"exchanged_amount":0,"final_amount":10,"price":10,"original_item":true,"custom":{"remarketing_campaign":"christmas_2018","time_to_checkout":"25
            minutes","ab_testing_group":"3245fcda"},"product":{"id":"db050bb1-810d-4420-a6fb-c1ce472a4ca9","name":"Mug
            Commanders Act","description":"White stoneware mug with C-Handle is
            the perfect cup for any
            beverage","category_1":"Home","category_2":"Kitchen","category_3":"Accessories","category_4":"Containers","category_5":"Mugs","tags":["mugs","handle","white","brand"],"condition":"new","availability":"in_stock","availability_date":"2019-02-06T17:41:31.427+01:00","expiration_date":"2019-02-06T17:41:31.427+01:00","price":10,"sale_price":8,"currency":"EUR","image_link":"https://commandersact.com/images/shopping/mug_hi_res.jpg","link":"https://commandersact.com/shopping/mug","brand":"Commanders
            Act","width":6.4,"length":7.3,"height":9.5,"weight":80.7,"size":"medium","colors":["white","red"],"gtin":"134588842456789000","mpn":"134588842","custom":{"internal_category_id":721,"warehouse":"building
            B","box_barcode":1830135586179}}}]}

            {"id":"db050bb1-810d-4420-a6fb-c1ce472a4ca9","user":{"user_email":"user@example.com"},"type":"offline","status":"in_progress","created":"2018-01-01T20:00:00.000+01:00","updated":"2018-01-01T20:00:00.000+01:00","acknowledged":true,"currency":"EUR","comment":"Package
            needs to be smaller than 30cm by
            30cm","billing_address":{"country":"France","iso_country_code":"FR","country_code":"FRA","region":"Ile-de-France","locality":"Paris","postal_code":"75009","recipient":"Commanders
            Act","street_address":"3-5 Rue
            Saint-Georges","full_address":"Commanders Act 3-5 Rue Saint-Georges
            75009
            Paris","label":"home","coordinates":{"latitude":48.857764,"longitude":2.33935}},"contact_address":{"country":"France","iso_country_code":"FR","country_code":"FRA","region":"Ile-de-France","locality":"Paris","postal_code":"75009","recipient":"Commanders
            Act","street_address":"3-5 Rue
            Saint-Georges","full_address":"Commanders Act 3-5 Rue Saint-Georges
            75009
            Paris","label":"home","coordinates":{"latitude":48.857764,"longitude":2.33935}},"shipping_address":{"country":"France","iso_country_code":"FR","country_code":"FRA","region":"Ile-de-France","locality":"Paris","postal_code":"75009","recipient":"Commanders
            Act","street_address":"3-5 Rue
            Saint-Georges","full_address":"Commanders Act 3-5 Rue Saint-Georges
            75009
            Paris","label":"home","coordinates":{"latitude":48.857764,"longitude":2.33935}},"shipping_provider":"UPS","shipping_tracking_code":"702c7a16-2c3d-4946-bb35-69ba540773f6","payment_method":"card","original_quantity":3,"cancelled_quantity":1,"returned_quantity":1,"exchanged_quantity":0,"final_quantity":1,"original_amount":30,"cancelled_amount":10,"returned_amount":10,"exchanged_amount":0,"shipping_amount":0,"discount_amount":0,"tax_amount":5,"final_amount":10,"custom":{"internal_reference":"fa34dc2","referer":"user@example.com","website_version":"2.4"},"conversion_items":[{"id":"68cd1310-4b7a-454c-99fb-2510f0e156ec","original_quantity":3,"cancelled_quantity":1,"returned_quantity":1,"exchanged_quantity":0,"final_quantity":1,"original_amount":30,"cancelled_amount":10,"returned_amount":10,"exchanged_amount":0,"final_amount":10,"price":10,"original_item":true,"custom":{"remarketing_campaign":"christmas_2018","time_to_checkout":"25
            minutes","ab_testing_group":"3245fcda"},"product":{"id":"db050bb1-810d-4420-a6fb-c1ce472a4ca9","name":"Mug
            Commanders Act","description":"White stoneware mug with C-Handle is
            the perfect cup for any
            beverage","category_1":"Home","category_2":"Kitchen","category_3":"Accessories","category_4":"Containers","category_5":"Mugs","tags":["mugs","handle","white","brand"],"condition":"new","availability":"in_stock","availability_date":"2019-02-06T17:41:31.427+01:00","expiration_date":"2019-02-06T17:41:31.427+01:00","price":10,"sale_price":8,"currency":"EUR","image_link":"https://commandersact.com/images/shopping/mug_hi_res.jpg","link":"https://commandersact.com/shopping/mug","brand":"Commanders
            Act","width":6.4,"length":7.3,"height":9.5,"weight":80.7,"size":"medium","colors":["white","red"],"gtin":"134588842456789000","mpn":"134588842","custom":{"internal_category_id":721,"warehouse":"building
            B","box_barcode":1830135586179}}},{"id":"68cd1310-4b7a-454c-99fb-2510f0e156ec","original_quantity":3,"cancelled_quantity":1,"returned_quantity":1,"exchanged_quantity":0,"final_quantity":1,"original_amount":30,"cancelled_amount":10,"returned_amount":10,"exchanged_amount":0,"final_amount":10,"price":10,"original_item":true,"custom":{"remarketing_campaign":"christmas_2018","time_to_checkout":"25
            minutes","ab_testing_group":"3245fcda"},"product":{"id":"db050bb1-810d-4420-a6fb-c1ce472a4ca9","name":"Mug
            Commanders Act","description":"White stoneware mug with C-Handle is
            the perfect cup for any
            beverage","category_1":"Home","category_2":"Kitchen","category_3":"Accessories","category_4":"Containers","category_5":"Mugs","tags":["mugs","handle","white","brand"],"condition":"new","availability":"in_stock","availability_date":"2019-02-06T17:41:31.427+01:00","expiration_date":"2019-02-06T17:41:31.427+01:00","price":10,"sale_price":8,"currency":"EUR","image_link":"https://commandersact.com/images/shopping/mug_hi_res.jpg","link":"https://commandersact.com/shopping/mug","brand":"Commanders
            Act","width":6.4,"length":7.3,"height":9.5,"weight":80.7,"size":"medium","colors":["white","red"],"gtin":"134588842456789000","mpn":"134588842","custom":{"internal_category_id":721,"warehouse":"building
            B","box_barcode":1830135586179}}}]}

            {"id":"db050bb1-810d-4420-a6fb-c1ce472a4ca9","user":{"user_email":"user@example.com"},"type":"offline","status":"in_progress","created":"2018-01-01T20:00:00.000+01:00","updated":"2018-01-01T20:00:00.000+01:00","acknowledged":true,"currency":"EUR","comment":"Package
            needs to be smaller than 30cm by
            30cm","billing_address":{"country":"France","iso_country_code":"FR","country_code":"FRA","region":"Ile-de-France","locality":"Paris","postal_code":"75009","recipient":"Commanders
            Act","street_address":"3-5 Rue
            Saint-Georges","full_address":"Commanders Act 3-5 Rue Saint-Georges
            75009
            Paris","label":"home","coordinates":{"latitude":48.857764,"longitude":2.33935}},"contact_address":{"country":"France","iso_country_code":"FR","country_code":"FRA","region":"Ile-de-France","locality":"Paris","postal_code":"75009","recipient":"Commanders
            Act","street_address":"3-5 Rue
            Saint-Georges","full_address":"Commanders Act 3-5 Rue Saint-Georges
            75009
            Paris","label":"home","coordinates":{"latitude":48.857764,"longitude":2.33935}},"shipping_address":{"country":"France","iso_country_code":"FR","country_code":"FRA","region":"Ile-de-France","locality":"Paris","postal_code":"75009","recipient":"Commanders
            Act","street_address":"3-5 Rue
            Saint-Georges","full_address":"Commanders Act 3-5 Rue Saint-Georges
            75009
            Paris","label":"home","coordinates":{"latitude":48.857764,"longitude":2.33935}},"shipping_provider":"UPS","shipping_tracking_code":"702c7a16-2c3d-4946-bb35-69ba540773f6","payment_method":"card","original_quantity":3,"cancelled_quantity":1,"returned_quantity":1,"exchanged_quantity":0,"final_quantity":1,"original_amount":30,"cancelled_amount":10,"returned_amount":10,"exchanged_amount":0,"shipping_amount":0,"discount_amount":0,"tax_amount":5,"final_amount":10,"custom":{"internal_reference":"fa34dc2","referer":"user@example.com","website_version":"2.4"},"conversion_items":[{"id":"68cd1310-4b7a-454c-99fb-2510f0e156ec","original_quantity":3,"cancelled_quantity":1,"returned_quantity":1,"exchanged_quantity":0,"final_quantity":1,"original_amount":30,"cancelled_amount":10,"returned_amount":10,"exchanged_amount":0,"final_amount":10,"price":10,"original_item":true,"custom":{"remarketing_campaign":"christmas_2018","time_to_checkout":"25
            minutes","ab_testing_group":"3245fcda"},"product":{"id":"db050bb1-810d-4420-a6fb-c1ce472a4ca9","name":"Mug
            Commanders Act","description":"White stoneware mug with C-Handle is
            the perfect cup for any
            beverage","category_1":"Home","category_2":"Kitchen","category_3":"Accessories","category_4":"Containers","category_5":"Mugs","tags":["mugs","handle","white","brand"],"condition":"new","availability":"in_stock","availability_date":"2019-02-06T17:41:31.427+01:00","expiration_date":"2019-02-06T17:41:31.427+01:00","price":10,"sale_price":8,"currency":"EUR","image_link":"https://commandersact.com/images/shopping/mug_hi_res.jpg","link":"https://commandersact.com/shopping/mug","brand":"Commanders
            Act","width":6.4,"length":7.3,"height":9.5,"weight":80.7,"size":"medium","colors":["white","red"],"gtin":"134588842456789000","mpn":"134588842","custom":{"internal_category_id":721,"warehouse":"building
            B","box_barcode":1830135586179}}},{"id":"68cd1310-4b7a-454c-99fb-2510f0e156ec","original_quantity":3,"cancelled_quantity":1,"returned_quantity":1,"exchanged_quantity":0,"final_quantity":1,"original_amount":30,"cancelled_amount":10,"returned_amount":10,"exchanged_amount":0,"final_amount":10,"price":10,"original_item":true,"custom":{"remarketing_campaign":"christmas_2018","time_to_checkout":"25
            minutes","ab_testing_group":"3245fcda"},"product":{"id":"db050bb1-810d-4420-a6fb-c1ce472a4ca9","name":"Mug
            Commanders Act","description":"White stoneware mug with C-Handle is
            the perfect cup for any
            beverage","category_1":"Home","category_2":"Kitchen","category_3":"Accessories","category_4":"Containers","category_5":"Mugs","tags":["mugs","handle","white","brand"],"condition":"new","availability":"in_stock","availability_date":"2019-02-06T17:41:31.427+01:00","expiration_date":"2019-02-06T17:41:31.427+01:00","price":10,"sale_price":8,"currency":"EUR","image_link":"https://commandersact.com/images/shopping/mug_hi_res.jpg","link":"https://commandersact.com/shopping/mug","brand":"Commanders
            Act","width":6.4,"length":7.3,"height":9.5,"weight":80.7,"size":"medium","colors":["white","red"],"gtin":"134588842456789000","mpn":"134588842","custom":{"internal_category_id":721,"warehouse":"building
            B","box_barcode":1830135586179}}}]}

            ' |  \
              http POST https://api.commander1.com/v2/REPLACE_SITEID/conversions/bulk \
              content-type:application/x-ndjson
        - lang: Shell
          source: >-
            curl --request POST \
              --url https://api.commander1.com/v2/REPLACE_SITEID/conversions/bulk \
              --header 'content-type: application/x-ndjson' \
              --data '{"id":"db050bb1-810d-4420-a6fb-c1ce472a4ca9","user":{"user_email":"user@example.com"},"type":"offline","status":"in_progress","created":"2018-01-01T20:00:00.000+01:00","updated":"2018-01-01T20:00:00.000+01:00","acknowledged":true,"currency":"EUR","comment":"Package needs to be smaller than 30cm by 30cm","billing_address":{"country":"France","iso_country_code":"FR","country_code":"FRA","region":"Ile-de-France","locality":"Paris","postal_code":"75009","recipient":"Commanders Act","street_address":"3-5 Rue Saint-Georges","full_address":"Commanders Act 3-5 Rue Saint-Georges 75009 Paris","label":"home","coordinates":{"latitude":48.857764,"longitude":2.33935}},"contact_address":{"country":"France","iso_country_code":"FR","country_code":"FRA","region":"Ile-de-France","locality":"Paris","postal_code":"75009","recipient":"Commanders Act","street_address":"3-5 Rue Saint-Georges","full_address":"Commanders Act 3-5 Rue Saint-Georges 75009 Paris","label":"home","coordinates":{"latitude":48.857764,"longitude":2.33935}},"shipping_address":{"country":"France","iso_country_code":"FR","country_code":"FRA","region":"Ile-de-France","locality":"Paris","postal_code":"75009","recipient":"Commanders Act","street_address":"3-5 Rue Saint-Georges","full_address":"Commanders Act 3-5 Rue Saint-Georges 75009 Paris","label":"home","coordinates":{"latitude":48.857764,"longitude":2.33935}},"shipping_provider":"UPS","shipping_tracking_code":"702c7a16-2c3d-4946-bb35-69ba540773f6","payment_method":"card","original_quantity":3,"cancelled_quantity":1,"returned_quantity":1,"exchanged_quantity":0,"final_quantity":1,"original_amount":30,"cancelled_amount":10,"returned_amount":10,"exchanged_amount":0,"shipping_amount":0,"discount_amount":0,"tax_amount":5,"final_amount":10,"custom":{"internal_reference":"fa34dc2","referer":"user@example.com","website_version":"2.4"},"conversion_items":[{"id":"68cd1310-4b7a-454c-99fb-2510f0e156ec","original_quantity":3,"cancelled_quantity":1,"returned_quantity":1,"exchanged_quantity":0,"final_quantity":1,"original_amount":30,"cancelled_amount":10,"returned_amount":10,"exchanged_amount":0,"final_amount":10,"price":10,"original_item":true,"custom":{"remarketing_campaign":"christmas_2018","time_to_checkout":"25 minutes","ab_testing_group":"3245fcda"},"product":{"id":"db050bb1-810d-4420-a6fb-c1ce472a4ca9","name":"Mug Commanders Act","description":"White stoneware mug with C-Handle is the perfect cup for any beverage","category_1":"Home","category_2":"Kitchen","category_3":"Accessories","category_4":"Containers","category_5":"Mugs","tags":["mugs","handle","white","brand"],"condition":"new","availability":"in_stock","availability_date":"2019-02-06T17:41:31.427+01:00","expiration_date":"2019-02-06T17:41:31.427+01:00","price":10,"sale_price":8,"currency":"EUR","image_link":"https://commandersact.com/images/shopping/mug_hi_res.jpg","link":"https://commandersact.com/shopping/mug","brand":"Commanders Act","width":6.4,"length":7.3,"height":9.5,"weight":80.7,"size":"medium","colors":["white","red"],"gtin":"134588842456789000","mpn":"134588842","custom":{"internal_category_id":721,"warehouse":"building B","box_barcode":1830135586179}}},{"id":"68cd1310-4b7a-454c-99fb-2510f0e156ec","original_quantity":3,"cancelled_quantity":1,"returned_quantity":1,"exchanged_quantity":0,"final_quantity":1,"original_amount":30,"cancelled_amount":10,"returned_amount":10,"exchanged_amount":0,"final_amount":10,"price":10,"original_item":true,"custom":{"remarketing_campaign":"christmas_2018","time_to_checkout":"25 minutes","ab_testing_group":"3245fcda"},"product":{"id":"db050bb1-810d-4420-a6fb-c1ce472a4ca9","name":"Mug Commanders Act","description":"White stoneware mug with C-Handle is the perfect cup for any beverage","category_1":"Home","category_2":"Kitchen","category_3":"Accessories","category_4":"Containers","category_5":"Mugs","tags":["mugs","handle","white","brand"],"condition":"new","availability":"in_stock","availability_date":"2019-02-06T17:41:31.427+01:00","expiration_date":"2019-02-06T17:41:31.427+01:00","price":10,"sale_price":8,"currency":"EUR","image_link":"https://commandersact.com/images/shopping/mug_hi_res.jpg","link":"https://commandersact.com/shopping/mug","brand":"Commanders Act","width":6.4,"length":7.3,"height":9.5,"weight":80.7,"size":"medium","colors":["white","red"],"gtin":"134588842456789000","mpn":"134588842","custom":{"internal_category_id":721,"warehouse":"building B","box_barcode":1830135586179}}}]}
            {"id":"db050bb1-810d-4420-a6fb-c1ce472a4ca9","user":{"user_email":"user@example.com"},"type":"offline","status":"in_progress","created":"2018-01-01T20:00:00.000+01:00","updated":"2018-01-01T20:00:00.000+01:00","acknowledged":true,"currency":"EUR","comment":"Package
            needs to be smaller than 30cm by
            30cm","billing_address":{"country":"France","iso_country_code":"FR","country_code":"FRA","region":"Ile-de-France","locality":"Paris","postal_code":"75009","recipient":"Commanders
            Act","street_address":"3-5 Rue
            Saint-Georges","full_address":"Commanders Act 3-5 Rue Saint-Georges
            75009
            Paris","label":"home","coordinates":{"latitude":48.857764,"longitude":2.33935}},"contact_address":{"country":"France","iso_country_code":"FR","country_code":"FRA","region":"Ile-de-France","locality":"Paris","postal_code":"75009","recipient":"Commanders
            Act","street_address":"3-5 Rue
            Saint-Georges","full_address":"Commanders Act 3-5 Rue Saint-Georges
            75009
            Paris","label":"home","coordinates":{"latitude":48.857764,"longitude":2.33935}},"shipping_address":{"country":"France","iso_country_code":"FR","country_code":"FRA","region":"Ile-de-France","locality":"Paris","postal_code":"75009","recipient":"Commanders
            Act","street_address":"3-5 Rue
            Saint-Georges","full_address":"Commanders Act 3-5 Rue Saint-Georges
            75009
            Paris","label":"home","coordinates":{"latitude":48.857764,"longitude":2.33935}},"shipping_provider":"UPS","shipping_tracking_code":"702c7a16-2c3d-4946-bb35-69ba540773f6","payment_method":"card","original_quantity":3,"cancelled_quantity":1,"returned_quantity":1,"exchanged_quantity":0,"final_quantity":1,"original_amount":30,"cancelled_amount":10,"returned_amount":10,"exchanged_amount":0,"shipping_amount":0,"discount_amount":0,"tax_amount":5,"final_amount":10,"custom":{"internal_reference":"fa34dc2","referer":"user@example.com","website_version":"2.4"},"conversion_items":[{"id":"68cd1310-4b7a-454c-99fb-2510f0e156ec","original_quantity":3,"cancelled_quantity":1,"returned_quantity":1,"exchanged_quantity":0,"final_quantity":1,"original_amount":30,"cancelled_amount":10,"returned_amount":10,"exchanged_amount":0,"final_amount":10,"price":10,"original_item":true,"custom":{"remarketing_campaign":"christmas_2018","time_to_checkout":"25
            minutes","ab_testing_group":"3245fcda"},"product":{"id":"db050bb1-810d-4420-a6fb-c1ce472a4ca9","name":"Mug
            Commanders Act","description":"White stoneware mug with C-Handle is
            the perfect cup for any
            beverage","category_1":"Home","category_2":"Kitchen","category_3":"Accessories","category_4":"Containers","category_5":"Mugs","tags":["mugs","handle","white","brand"],"condition":"new","availability":"in_stock","availability_date":"2019-02-06T17:41:31.427+01:00","expiration_date":"2019-02-06T17:41:31.427+01:00","price":10,"sale_price":8,"currency":"EUR","image_link":"https://commandersact.com/images/shopping/mug_hi_res.jpg","link":"https://commandersact.com/shopping/mug","brand":"Commanders
            Act","width":6.4,"length":7.3,"height":9.5,"weight":80.7,"size":"medium","colors":["white","red"],"gtin":"134588842456789000","mpn":"134588842","custom":{"internal_category_id":721,"warehouse":"building
            B","box_barcode":1830135586179}}},{"id":"68cd1310-4b7a-454c-99fb-2510f0e156ec","original_quantity":3,"cancelled_quantity":1,"returned_quantity":1,"exchanged_quantity":0,"final_quantity":1,"original_amount":30,"cancelled_amount":10,"returned_amount":10,"exchanged_amount":0,"final_amount":10,"price":10,"original_item":true,"custom":{"remarketing_campaign":"christmas_2018","time_to_checkout":"25
            minutes","ab_testing_group":"3245fcda"},"product":{"id":"db050bb1-810d-4420-a6fb-c1ce472a4ca9","name":"Mug
            Commanders Act","description":"White stoneware mug with C-Handle is
            the perfect cup for any
            beverage","category_1":"Home","category_2":"Kitchen","category_3":"Accessories","category_4":"Containers","category_5":"Mugs","tags":["mugs","handle","white","brand"],"condition":"new","availability":"in_stock","availability_date":"2019-02-06T17:41:31.427+01:00","expiration_date":"2019-02-06T17:41:31.427+01:00","price":10,"sale_price":8,"currency":"EUR","image_link":"https://commandersact.com/images/shopping/mug_hi_res.jpg","link":"https://commandersact.com/shopping/mug","brand":"Commanders
            Act","width":6.4,"length":7.3,"height":9.5,"weight":80.7,"size":"medium","colors":["white","red"],"gtin":"134588842456789000","mpn":"134588842","custom":{"internal_category_id":721,"warehouse":"building
            B","box_barcode":1830135586179}}}]}

            {"id":"db050bb1-810d-4420-a6fb-c1ce472a4ca9","user":{"user_email":"user@example.com"},"type":"offline","status":"in_progress","created":"2018-01-01T20:00:00.000+01:00","updated":"2018-01-01T20:00:00.000+01:00","acknowledged":true,"currency":"EUR","comment":"Package
            needs to be smaller than 30cm by
            30cm","billing_address":{"country":"France","iso_country_code":"FR","country_code":"FRA","region":"Ile-de-France","locality":"Paris","postal_code":"75009","recipient":"Commanders
            Act","street_address":"3-5 Rue
            Saint-Georges","full_address":"Commanders Act 3-5 Rue Saint-Georges
            75009
            Paris","label":"home","coordinates":{"latitude":48.857764,"longitude":2.33935}},"contact_address":{"country":"France","iso_country_code":"FR","country_code":"FRA","region":"Ile-de-France","locality":"Paris","postal_code":"75009","recipient":"Commanders
            Act","street_address":"3-5 Rue
            Saint-Georges","full_address":"Commanders Act 3-5 Rue Saint-Georges
            75009
            Paris","label":"home","coordinates":{"latitude":48.857764,"longitude":2.33935}},"shipping_address":{"country":"France","iso_country_code":"FR","country_code":"FRA","region":"Ile-de-France","locality":"Paris","postal_code":"75009","recipient":"Commanders
            Act","street_address":"3-5 Rue
            Saint-Georges","full_address":"Commanders Act 3-5 Rue Saint-Georges
            75009
            Paris","label":"home","coordinates":{"latitude":48.857764,"longitude":2.33935}},"shipping_provider":"UPS","shipping_tracking_code":"702c7a16-2c3d-4946-bb35-69ba540773f6","payment_method":"card","original_quantity":3,"cancelled_quantity":1,"returned_quantity":1,"exchanged_quantity":0,"final_quantity":1,"original_amount":30,"cancelled_amount":10,"returned_amount":10,"exchanged_amount":0,"shipping_amount":0,"discount_amount":0,"tax_amount":5,"final_amount":10,"custom":{"internal_reference":"fa34dc2","referer":"user@example.com","website_version":"2.4"},"conversion_items":[{"id":"68cd1310-4b7a-454c-99fb-2510f0e156ec","original_quantity":3,"cancelled_quantity":1,"returned_quantity":1,"exchanged_quantity":0,"final_quantity":1,"original_amount":30,"cancelled_amount":10,"returned_amount":10,"exchanged_amount":0,"final_amount":10,"price":10,"original_item":true,"custom":{"remarketing_campaign":"christmas_2018","time_to_checkout":"25
            minutes","ab_testing_group":"3245fcda"},"product":{"id":"db050bb1-810d-4420-a6fb-c1ce472a4ca9","name":"Mug
            Commanders Act","description":"White stoneware mug with C-Handle is
            the perfect cup for any
            beverage","category_1":"Home","category_2":"Kitchen","category_3":"Accessories","category_4":"Containers","category_5":"Mugs","tags":["mugs","handle","white","brand"],"condition":"new","availability":"in_stock","availability_date":"2019-02-06T17:41:31.427+01:00","expiration_date":"2019-02-06T17:41:31.427+01:00","price":10,"sale_price":8,"currency":"EUR","image_link":"https://commandersact.com/images/shopping/mug_hi_res.jpg","link":"https://commandersact.com/shopping/mug","brand":"Commanders
            Act","width":6.4,"length":7.3,"height":9.5,"weight":80.7,"size":"medium","colors":["white","red"],"gtin":"134588842456789000","mpn":"134588842","custom":{"internal_category_id":721,"warehouse":"building
            B","box_barcode":1830135586179}}},{"id":"68cd1310-4b7a-454c-99fb-2510f0e156ec","original_quantity":3,"cancelled_quantity":1,"returned_quantity":1,"exchanged_quantity":0,"final_quantity":1,"original_amount":30,"cancelled_amount":10,"returned_amount":10,"exchanged_amount":0,"final_amount":10,"price":10,"original_item":true,"custom":{"remarketing_campaign":"christmas_2018","time_to_checkout":"25
            minutes","ab_testing_group":"3245fcda"},"product":{"id":"db050bb1-810d-4420-a6fb-c1ce472a4ca9","name":"Mug
            Commanders Act","description":"White stoneware mug with C-Handle is
            the perfect cup for any
            beverage","category_1":"Home","category_2":"Kitchen","category_3":"Accessories","category_4":"Containers","category_5":"Mugs","tags":["mugs","handle","white","brand"],"condition":"new","availability":"in_stock","availability_date":"2019-02-06T17:41:31.427+01:00","expiration_date":"2019-02-06T17:41:31.427+01:00","price":10,"sale_price":8,"currency":"EUR","image_link":"https://commandersact.com/images/shopping/mug_hi_res.jpg","link":"https://commandersact.com/shopping/mug","brand":"Commanders
            Act","width":6.4,"length":7.3,"height":9.5,"weight":80.7,"size":"medium","colors":["white","red"],"gtin":"134588842456789000","mpn":"134588842","custom":{"internal_category_id":721,"warehouse":"building
            B","box_barcode":1830135586179}}}]}

            '
        - lang: Node
          source: >-
            const http = require("https");


            const options = {
              "method": "POST",
              "hostname": "api.commander1.com",
              "port": null,
              "path": "/v2/REPLACE_SITEID/conversions/bulk",
              "headers": {
                "content-type": "application/x-ndjson"
              }
            };


            const req = http.request(options, function (res) {
              const chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                const body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });


            req.write("{\"id\":\"db050bb1-810d-4420-a6fb-c1ce472a4ca9\",\"user\":{\"user_email\":\"user@example.com\"},\"type\":\"offline\",\"status\":\"in_progress\",\"created\":\"2018-01-01T20:00:00.000+01:00\",\"updated\":\"2018-01-01T20:00:00.000+01:00\",\"acknowledged\":true,\"currency\":\"EUR\",\"comment\":\"Package
            needs to be smaller than 30cm by
            30cm\",\"billing_address\":{\"country\":\"France\",\"iso_country_code\":\"FR\",\"country_code\":\"FRA\",\"region\":\"Ile-de-France\",\"locality\":\"Paris\",\"postal_code\":\"75009\",\"recipient\":\"Commanders
            Act\",\"street_address\":\"3-5 Rue
            Saint-Georges\",\"full_address\":\"Commanders Act 3-5 Rue
            Saint-Georges 75009
            Paris\",\"label\":\"home\",\"coordinates\":{\"latitude\":48.857764,\"longitude\":2.33935}},\"contact_address\":{\"country\":\"France\",\"iso_country_code\":\"FR\",\"country_code\":\"FRA\",\"region\":\"Ile-de-France\",\"locality\":\"Paris\",\"postal_code\":\"75009\",\"recipient\":\"Commanders
            Act\",\"street_address\":\"3-5 Rue
            Saint-Georges\",\"full_address\":\"Commanders Act 3-5 Rue
            Saint-Georges 75009
            Paris\",\"label\":\"home\",\"coordinates\":{\"latitude\":48.857764,\"longitude\":2.33935}},\"shipping_address\":{\"country\":\"France\",\"iso_country_code\":\"FR\",\"country_code\":\"FRA\",\"region\":\"Ile-de-France\",\"locality\":\"Paris\",\"postal_code\":\"75009\",\"recipient\":\"Commanders
            Act\",\"street_address\":\"3-5 Rue
            Saint-Georges\",\"full_address\":\"Commanders Act 3-5 Rue
            Saint-Georges 75009
            Paris\",\"label\":\"home\",\"coordinates\":{\"latitude\":48.857764,\"longitude\":2.33935}},\"shipping_provider\":\"UPS\",\"shipping_tracking_code\":\"702c7a16-2c3d-4946-bb35-69ba540773f6\",\"payment_method\":\"card\",\"original_quantity\":3,\"cancelled_quantity\":1,\"returned_quantity\":1,\"exchanged_quantity\":0,\"final_quantity\":1,\"original_amount\":30,\"cancelled_amount\":10,\"returned_amount\":10,\"exchanged_amount\":0,\"shipping_amount\":0,\"discount_amount\":0,\"tax_amount\":5,\"final_amount\":10,\"custom\":{\"internal_reference\":\"fa34dc2\",\"referer\":\"user@example.com\",\"website_version\":\"2.4\"},\"conversion_items\":[{\"id\":\"68cd1310-4b7a-454c-99fb-2510f0e156ec\",\"original_quantity\":3,\"cancelled_quantity\":1,\"returned_quantity\":1,\"exchanged_quantity\":0,\"final_quantity\":1,\"original_amount\":30,\"cancelled_amount\":10,\"returned_amount\":10,\"exchanged_amount\":0,\"final_amount\":10,\"price\":10,\"original_item\":true,\"custom\":{\"remarketing_campaign\":\"christmas_2018\",\"time_to_checkout\":\"25
            minutes\",\"ab_testing_group\":\"3245fcda\"},\"product\":{\"id\":\"db050bb1-810d-4420-a6fb-c1ce472a4ca9\",\"name\":\"Mug
            Commanders Act\",\"description\":\"White stoneware mug with C-Handle
            is the perfect cup for any
            beverage\",\"category_1\":\"Home\",\"category_2\":\"Kitchen\",\"category_3\":\"Accessories\",\"category_4\":\"Containers\",\"category_5\":\"Mugs\",\"tags\":[\"mugs\",\"handle\",\"white\",\"brand\"],\"condition\":\"new\",\"availability\":\"in_stock\",\"availability_date\":\"2019-02-06T17:41:31.427+01:00\",\"expiration_date\":\"2019-02-06T17:41:31.427+01:00\",\"price\":10,\"sale_price\":8,\"currency\":\"EUR\",\"image_link\":\"https://commandersact.com/images/shopping/mug_hi_res.jpg\",\"link\":\"https://commandersact.com/shopping/mug\",\"brand\":\"Commanders
            Act\",\"width\":6.4,\"length\":7.3,\"height\":9.5,\"weight\":80.7,\"size\":\"medium\",\"colors\":[\"white\",\"red\"],\"gtin\":\"134588842456789000\",\"mpn\":\"134588842\",\"custom\":{\"internal_category_id\":721,\"warehouse\":\"building
            B\",\"box_barcode\":1830135586179}}},{\"id\":\"68cd1310-4b7a-454c-99fb-2510f0e156ec\",\"original_quantity\":3,\"cancelled_quantity\":1,\"returned_quantity\":1,\"exchanged_quantity\":0,\"final_quantity\":1,\"original_amount\":30,\"cancelled_amount\":10,\"returned_amount\":10,\"exchanged_amount\":0,\"final_amount\":10,\"price\":10,\"original_item\":true,\"custom\":{\"remarketing_campaign\":\"christmas_2018\",\"time_to_checkout\":\"25
            minutes\",\"ab_testing_group\":\"3245fcda\"},\"product\":{\"id\":\"db050bb1-810d-4420-a6fb-c1ce472a4ca9\",\"name\":\"Mug
            Commanders Act\",\"description\":\"White stoneware mug with C-Handle
            is the perfect cup for any
            beverage\",\"category_1\":\"Home\",\"category_2\":\"Kitchen\",\"category_3\":\"Accessories\",\"category_4\":\"Containers\",\"category_5\":\"Mugs\",\"tags\":[\"mugs\",\"handle\",\"white\",\"brand\"],\"condition\":\"new\",\"availability\":\"in_stock\",\"availability_date\":\"2019-02-06T17:41:31.427+01:00\",\"expiration_date\":\"2019-02-06T17:41:31.427+01:00\",\"price\":10,\"sale_price\":8,\"currency\":\"EUR\",\"image_link\":\"https://commandersact.com/images/shopping/mug_hi_res.jpg\",\"link\":\"https://commandersact.com/shopping/mug\",\"brand\":\"Commanders
            Act\",\"width\":6.4,\"length\":7.3,\"height\":9.5,\"weight\":80.7,\"size\":\"medium\",\"colors\":[\"white\",\"red\"],\"gtin\":\"134588842456789000\",\"mpn\":\"134588842\",\"custom\":{\"internal_category_id\":721,\"warehouse\":\"building
            B\",\"box_barcode\":1830135586179}}}]}\n{\"id\":\"db050bb1-810d-4420-a6fb-c1ce472a4ca9\",\"user\":{\"user_email\":\"user@example.com\"},\"type\":\"offline\",\"status\":\"in_progress\",\"created\":\"2018-01-01T20:00:00.000+01:00\",\"updated\":\"2018-01-01T20:00:00.000+01:00\",\"acknowledged\":true,\"currency\":\"EUR\",\"comment\":\"Package
            needs to be smaller than 30cm by
            30cm\",\"billing_address\":{\"country\":\"France\",\"iso_country_code\":\"FR\",\"country_code\":\"FRA\",\"region\":\"Ile-de-France\",\"locality\":\"Paris\",\"postal_code\":\"75009\",\"recipient\":\"Commanders
            Act\",\"street_address\":\"3-5 Rue
            Saint-Georges\",\"full_address\":\"Commanders Act 3-5 Rue
            Saint-Georges 75009
            Paris\",\"label\":\"home\",\"coordinates\":{\"latitude\":48.857764,\"longitude\":2.33935}},\"contact_address\":{\"country\":\"France\",\"iso_country_code\":\"FR\",\"country_code\":\"FRA\",\"region\":\"Ile-de-France\",\"locality\":\"Paris\",\"postal_code\":\"75009\",\"recipient\":\"Commanders
            Act\",\"street_address\":\"3-5 Rue
            Saint-Georges\",\"full_address\":\"Commanders Act 3-5 Rue
            Saint-Georges 75009
            Paris\",\"label\":\"home\",\"coordinates\":{\"latitude\":48.857764,\"longitude\":2.33935}},\"shipping_address\":{\"country\":\"France\",\"iso_country_code\":\"FR\",\"country_code\":\"FRA\",\"region\":\"Ile-de-France\",\"locality\":\"Paris\",\"postal_code\":\"75009\",\"recipient\":\"Commanders
            Act\",\"street_address\":\"3-5 Rue
            Saint-Georges\",\"full_address\":\"Commanders Act 3-5 Rue
            Saint-Georges 75009
            Paris\",\"label\":\"home\",\"coordinates\":{\"latitude\":48.857764,\"longitude\":2.33935}},\"shipping_provider\":\"UPS\",\"shipping_tracking_code\":\"702c7a16-2c3d-4946-bb35-69ba540773f6\",\"payment_method\":\"card\",\"original_quantity\":3,\"cancelled_quantity\":1,\"returned_quantity\":1,\"exchanged_quantity\":0,\"final_quantity\":1,\"original_amount\":30,\"cancelled_amount\":10,\"returned_amount\":10,\"exchanged_amount\":0,\"shipping_amount\":0,\"discount_amount\":0,\"tax_amount\":5,\"final_amount\":10,\"custom\":{\"internal_reference\":\"fa34dc2\",\"referer\":\"user@example.com\",\"website_version\":\"2.4\"},\"conversion_items\":[{\"id\":\"68cd1310-4b7a-454c-99fb-2510f0e156ec\",\"original_quantity\":3,\"cancelled_quantity\":1,\"returned_quantity\":1,\"exchanged_quantity\":0,\"final_quantity\":1,\"original_amount\":30,\"cancelled_amount\":10,\"returned_amount\":10,\"exchanged_amount\":0,\"final_amount\":10,\"price\":10,\"original_item\":true,\"custom\":{\"remarketing_campaign\":\"christmas_2018\",\"time_to_checkout\":\"25
            minutes\",\"ab_testing_group\":\"3245fcda\"},\"product\":{\"id\":\"db050bb1-810d-4420-a6fb-c1ce472a4ca9\",\"name\":\"Mug
            Commanders Act\",\"description\":\"White stoneware mug with C-Handle
            is the perfect cup for any
            beverage\",\"category_1\":\"Home\",\"category_2\":\"Kitchen\",\"category_3\":\"Accessories\",\"category_4\":\"Containers\",\"category_5\":\"Mugs\",\"tags\":[\"mugs\",\"handle\",\"white\",\"brand\"],\"condition\":\"new\",\"availability\":\"in_stock\",\"availability_date\":\"2019-02-06T17:41:31.427+01:00\",\"expiration_date\":\"2019-02-06T17:41:31.427+01:00\",\"price\":10,\"sale_price\":8,\"currency\":\"EUR\",\"image_link\":\"https://commandersact.com/images/shopping/mug_hi_res.jpg\",\"link\":\"https://commandersact.com/shopping/mug\",\"brand\":\"Commanders
            Act\",\"width\":6.4,\"length\":7.3,\"height\":9.5,\"weight\":80.7,\"size\":\"medium\",\"colors\":[\"white\",\"red\"],\"gtin\":\"134588842456789000\",\"mpn\":\"134588842\",\"custom\":{\"internal_category_id\":721,\"warehouse\":\"building
            B\",\"box_barcode\":1830135586179}}},{\"id\":\"68cd1310-4b7a-454c-99fb-2510f0e156ec\",\"original_quantity\":3,\"cancelled_quantity\":1,\"returned_quantity\":1,\"exchanged_quantity\":0,\"final_quantity\":1,\"original_amount\":30,\"cancelled_amount\":10,\"returned_amount\":10,\"exchanged_amount\":0,\"final_amount\":10,\"price\":10,\"original_item\":true,\"custom\":{\"remarketing_campaign\":\"christmas_2018\",\"time_to_checkout\":\"25
            minutes\",\"ab_testing_group\":\"3245fcda\"},\"product\":{\"id\":\"db050bb1-810d-4420-a6fb-c1ce472a4ca9\",\"name\":\"Mug
            Commanders Act\",\"description\":\"White stoneware mug with C-Handle
            is the perfect cup for any
            beverage\",\"category_1\":\"Home\",\"category_2\":\"Kitchen\",\"category_3\":\"Accessories\",\"category_4\":\"Containers\",\"category_5\":\"Mugs\",\"tags\":[\"mugs\",\"handle\",\"white\",\"brand\"],\"condition\":\"new\",\"availability\":\"in_stock\",\"availability_date\":\"2019-02-06T17:41:31.427+01:00\",\"expiration_date\":\"2019-02-06T17:41:31.427+01:00\",\"price\":10,\"sale_price\":8,\"currency\":\"EUR\",\"image_link\":\"https://commandersact.com/images/shopping/mug_hi_res.jpg\",\"link\":\"https://commandersact.com/shopping/mug\",\"brand\":\"Commanders
            Act\",\"width\":6.4,\"length\":7.3,\"height\":9.5,\"weight\":80.7,\"size\":\"medium\",\"colors\":[\"white\",\"red\"],\"gtin\":\"134588842456789000\",\"mpn\":\"134588842\",\"custom\":{\"internal_category_id\":721,\"warehouse\":\"building
            B\",\"box_barcode\":1830135586179}}}]}\n{\"id\":\"db050bb1-810d-4420-a6fb-c1ce472a4ca9\",\"user\":{\"user_email\":\"user@example.com\"},\"type\":\"offline\",\"status\":\"in_progress\",\"created\":\"2018-01-01T20:00:00.000+01:00\",\"updated\":\"2018-01-01T20:00:00.000+01:00\",\"acknowledged\":true,\"currency\":\"EUR\",\"comment\":\"Package
            needs to be smaller than 30cm by
            30cm\",\"billing_address\":{\"country\":\"France\",\"iso_country_code\":\"FR\",\"country_code\":\"FRA\",\"region\":\"Ile-de-France\",\"locality\":\"Paris\",\"postal_code\":\"75009\",\"recipient\":\"Commanders
            Act\",\"street_address\":\"3-5 Rue
            Saint-Georges\",\"full_address\":\"Commanders Act 3-5 Rue
            Saint-Georges 75009
            Paris\",\"label\":\"home\",\"coordinates\":{\"latitude\":48.857764,\"longitude\":2.33935}},\"contact_address\":{\"country\":\"France\",\"iso_country_code\":\"FR\",\"country_code\":\"FRA\",\"region\":\"Ile-de-France\",\"locality\":\"Paris\",\"postal_code\":\"75009\",\"recipient\":\"Commanders
            Act\",\"street_address\":\"3-5 Rue
            Saint-Georges\",\"full_address\":\"Commanders Act 3-5 Rue
            Saint-Georges 75009
            Paris\",\"label\":\"home\",\"coordinates\":{\"latitude\":48.857764,\"longitude\":2.33935}},\"shipping_address\":{\"country\":\"France\",\"iso_country_code\":\"FR\",\"country_code\":\"FRA\",\"region\":\"Ile-de-France\",\"locality\":\"Paris\",\"postal_code\":\"75009\",\"recipient\":\"Commanders
            Act\",\"street_address\":\"3-5 Rue
            Saint-Georges\",\"full_address\":\"Commanders Act 3-5 Rue
            Saint-Georges 75009
            Paris\",\"label\":\"home\",\"coordinates\":{\"latitude\":48.857764,\"longitude\":2.33935}},\"shipping_provider\":\"UPS\",\"shipping_tracking_code\":\"702c7a16-2c3d-4946-bb35-69ba540773f6\",\"payment_method\":\"card\",\"original_quantity\":3,\"cancelled_quantity\":1,\"returned_quantity\":1,\"exchanged_quantity\":0,\"final_quantity\":1,\"original_amount\":30,\"cancelled_amount\":10,\"returned_amount\":10,\"exchanged_amount\":0,\"shipping_amount\":0,\"discount_amount\":0,\"tax_amount\":5,\"final_amount\":10,\"custom\":{\"internal_reference\":\"fa34dc2\",\"referer\":\"user@example.com\",\"website_version\":\"2.4\"},\"conversion_items\":[{\"id\":\"68cd1310-4b7a-454c-99fb-2510f0e156ec\",\"original_quantity\":3,\"cancelled_quantity\":1,\"returned_quantity\":1,\"exchanged_quantity\":0,\"final_quantity\":1,\"original_amount\":30,\"cancelled_amount\":10,\"returned_amount\":10,\"exchanged_amount\":0,\"final_amount\":10,\"price\":10,\"original_item\":true,\"custom\":{\"remarketing_campaign\":\"christmas_2018\",\"time_to_checkout\":\"25
            minutes\",\"ab_testing_group\":\"3245fcda\"},\"product\":{\"id\":\"db050bb1-810d-4420-a6fb-c1ce472a4ca9\",\"name\":\"Mug
            Commanders Act\",\"description\":\"White stoneware mug with C-Handle
            is the perfect cup for any
            beverage\",\"category_1\":\"Home\",\"category_2\":\"Kitchen\",\"category_3\":\"Accessories\",\"category_4\":\"Containers\",\"category_5\":\"Mugs\",\"tags\":[\"mugs\",\"handle\",\"white\",\"brand\"],\"condition\":\"new\",\"availability\":\"in_stock\",\"availability_date\":\"2019-02-06T17:41:31.427+01:00\",\"expiration_date\":\"2019-02-06T17:41:31.427+01:00\",\"price\":10,\"sale_price\":8,\"currency\":\"EUR\",\"image_link\":\"https://commandersact.com/images/shopping/mug_hi_res.jpg\",\"link\":\"https://commandersact.com/shopping/mug\",\"brand\":\"Commanders
            Act\",\"width\":6.4,\"length\":7.3,\"height\":9.5,\"weight\":80.7,\"size\":\"medium\",\"colors\":[\"white\",\"red\"],\"gtin\":\"134588842456789000\",\"mpn\":\"134588842\",\"custom\":{\"internal_category_id\":721,\"warehouse\":\"building
            B\",\"box_barcode\":1830135586179}}},{\"id\":\"68cd1310-4b7a-454c-99fb-2510f0e156ec\",\"original_quantity\":3,\"cancelled_quantity\":1,\"returned_quantity\":1,\"exchanged_quantity\":0,\"final_quantity\":1,\"original_amount\":30,\"cancelled_amount\":10,\"returned_amount\":10,\"exchanged_amount\":0,\"final_amount\":10,\"price\":10,\"original_item\":true,\"custom\":{\"remarketing_campaign\":\"christmas_2018\",\"time_to_checkout\":\"25
            minutes\",\"ab_testing_group\":\"3245fcda\"},\"product\":{\"id\":\"db050bb1-810d-4420-a6fb-c1ce472a4ca9\",\"name\":\"Mug
            Commanders Act\",\"description\":\"White stoneware mug with C-Handle
            is the perfect cup for any
            beverage\",\"category_1\":\"Home\",\"category_2\":\"Kitchen\",\"category_3\":\"Accessories\",\"category_4\":\"Containers\",\"category_5\":\"Mugs\",\"tags\":[\"mugs\",\"handle\",\"white\",\"brand\"],\"condition\":\"new\",\"availability\":\"in_stock\",\"availability_date\":\"2019-02-06T17:41:31.427+01:00\",\"expiration_date\":\"2019-02-06T17:41:31.427+01:00\",\"price\":10,\"sale_price\":8,\"currency\":\"EUR\",\"image_link\":\"https://commandersact.com/images/shopping/mug_hi_res.jpg\",\"link\":\"https://commandersact.com/shopping/mug\",\"brand\":\"Commanders
            Act\",\"width\":6.4,\"length\":7.3,\"height\":9.5,\"weight\":80.7,\"size\":\"medium\",\"colors\":[\"white\",\"red\"],\"gtin\":\"134588842456789000\",\"mpn\":\"134588842\",\"custom\":{\"internal_category_id\":721,\"warehouse\":\"building
            B\",\"box_barcode\":1830135586179}}}]}\n");

            req.end();
  /products/bulk:
    post:
      tags:
        - DmsProducts
      summary: Upsert products
      operationId: DmsProductsStore
      description: >-
        ### Usage

        This endpoint creates and updates Product.

        Your request will be processed asynchronously. It can take up to 24
        hours until the request is processed and updates are made in the
        database.

        ### Rate-Limiting

        With the rate limiting, it is recommended to put a maximum of 1000 lines
        per request. Otherwise insertion can be too long and got a connection
        drop and the consistency of the data cannnot be accurate.

        ### Update

        When an item already exist, the api merge the old product and the new
        one. All properties that aren't set as read only will be update.
      responses:
        '202': *ref_15
        '400': *ref_16
        '401': *ref_10
        '403': *ref_11
        '405': *ref_17
        '415': *ref_18
        '429': *ref_12
        '500': *ref_13
      security:
        - DataAuthentication: []
      requestBody:
        required: true
        description: Products as newline delimited JSON strings
        content:
          application/x-ndjson:
            schema: *ref_5
            examples:
              202.main.ndjson:
                value:
                  - *ref_1
                  - *ref_1
                  - *ref_1
              400.main:
                value:
                  id: fake
                  should: fail
      x-code-samples:
        - lang: Shell
          source: >-
            echo '{"id":"db050bb1-810d-4420-a6fb-c1ce472a4ca9","name":"Mug
            Commanders Act","description":"White stoneware mug with C-Handle is
            the perfect cup for any
            beverage","category_1":"Home","category_2":"Kitchen","category_3":"Accessories","category_4":"Containers","category_5":"Mugs","tags":["mugs","handle","white","brand"],"condition":"new","availability":"in_stock","availability_date":"2019-02-06T17:41:31.427+01:00","expiration_date":"2019-02-06T17:41:31.427+01:00","price":10,"sale_price":8,"currency":"EUR","image_link":"https://commandersact.com/images/shopping/mug_hi_res.jpg","link":"https://commandersact.com/shopping/mug","brand":"Commanders
            Act","width":6.4,"length":7.3,"height":9.5,"weight":80.7,"size":"medium","colors":["white","red"],"gtin":"134588842456789000","mpn":"134588842","custom":{"internal_category_id":721,"warehouse":"building
            B","box_barcode":1830135586179}}

            {"id":"db050bb1-810d-4420-a6fb-c1ce472a4ca9","name":"Mug Commanders
            Act","description":"White stoneware mug with C-Handle is the perfect
            cup for any
            beverage","category_1":"Home","category_2":"Kitchen","category_3":"Accessories","category_4":"Containers","category_5":"Mugs","tags":["mugs","handle","white","brand"],"condition":"new","availability":"in_stock","availability_date":"2019-02-06T17:41:31.427+01:00","expiration_date":"2019-02-06T17:41:31.427+01:00","price":10,"sale_price":8,"currency":"EUR","image_link":"https://commandersact.com/images/shopping/mug_hi_res.jpg","link":"https://commandersact.com/shopping/mug","brand":"Commanders
            Act","width":6.4,"length":7.3,"height":9.5,"weight":80.7,"size":"medium","colors":["white","red"],"gtin":"134588842456789000","mpn":"134588842","custom":{"internal_category_id":721,"warehouse":"building
            B","box_barcode":1830135586179}}

            {"id":"db050bb1-810d-4420-a6fb-c1ce472a4ca9","name":"Mug Commanders
            Act","description":"White stoneware mug with C-Handle is the perfect
            cup for any
            beverage","category_1":"Home","category_2":"Kitchen","category_3":"Accessories","category_4":"Containers","category_5":"Mugs","tags":["mugs","handle","white","brand"],"condition":"new","availability":"in_stock","availability_date":"2019-02-06T17:41:31.427+01:00","expiration_date":"2019-02-06T17:41:31.427+01:00","price":10,"sale_price":8,"currency":"EUR","image_link":"https://commandersact.com/images/shopping/mug_hi_res.jpg","link":"https://commandersact.com/shopping/mug","brand":"Commanders
            Act","width":6.4,"length":7.3,"height":9.5,"weight":80.7,"size":"medium","colors":["white","red"],"gtin":"134588842456789000","mpn":"134588842","custom":{"internal_category_id":721,"warehouse":"building
            B","box_barcode":1830135586179}}

            ' |  \
              http POST https://api.commander1.com/v2/REPLACE_SITEID/products/bulk \
              content-type:application/x-ndjson
        - lang: Shell
          source: >-
            curl --request POST \
              --url https://api.commander1.com/v2/REPLACE_SITEID/products/bulk \
              --header 'content-type: application/x-ndjson' \
              --data '{"id":"db050bb1-810d-4420-a6fb-c1ce472a4ca9","name":"Mug Commanders Act","description":"White stoneware mug with C-Handle is the perfect cup for any beverage","category_1":"Home","category_2":"Kitchen","category_3":"Accessories","category_4":"Containers","category_5":"Mugs","tags":["mugs","handle","white","brand"],"condition":"new","availability":"in_stock","availability_date":"2019-02-06T17:41:31.427+01:00","expiration_date":"2019-02-06T17:41:31.427+01:00","price":10,"sale_price":8,"currency":"EUR","image_link":"https://commandersact.com/images/shopping/mug_hi_res.jpg","link":"https://commandersact.com/shopping/mug","brand":"Commanders Act","width":6.4,"length":7.3,"height":9.5,"weight":80.7,"size":"medium","colors":["white","red"],"gtin":"134588842456789000","mpn":"134588842","custom":{"internal_category_id":721,"warehouse":"building B","box_barcode":1830135586179}}
            {"id":"db050bb1-810d-4420-a6fb-c1ce472a4ca9","name":"Mug Commanders
            Act","description":"White stoneware mug with C-Handle is the perfect
            cup for any
            beverage","category_1":"Home","category_2":"Kitchen","category_3":"Accessories","category_4":"Containers","category_5":"Mugs","tags":["mugs","handle","white","brand"],"condition":"new","availability":"in_stock","availability_date":"2019-02-06T17:41:31.427+01:00","expiration_date":"2019-02-06T17:41:31.427+01:00","price":10,"sale_price":8,"currency":"EUR","image_link":"https://commandersact.com/images/shopping/mug_hi_res.jpg","link":"https://commandersact.com/shopping/mug","brand":"Commanders
            Act","width":6.4,"length":7.3,"height":9.5,"weight":80.7,"size":"medium","colors":["white","red"],"gtin":"134588842456789000","mpn":"134588842","custom":{"internal_category_id":721,"warehouse":"building
            B","box_barcode":1830135586179}}

            {"id":"db050bb1-810d-4420-a6fb-c1ce472a4ca9","name":"Mug Commanders
            Act","description":"White stoneware mug with C-Handle is the perfect
            cup for any
            beverage","category_1":"Home","category_2":"Kitchen","category_3":"Accessories","category_4":"Containers","category_5":"Mugs","tags":["mugs","handle","white","brand"],"condition":"new","availability":"in_stock","availability_date":"2019-02-06T17:41:31.427+01:00","expiration_date":"2019-02-06T17:41:31.427+01:00","price":10,"sale_price":8,"currency":"EUR","image_link":"https://commandersact.com/images/shopping/mug_hi_res.jpg","link":"https://commandersact.com/shopping/mug","brand":"Commanders
            Act","width":6.4,"length":7.3,"height":9.5,"weight":80.7,"size":"medium","colors":["white","red"],"gtin":"134588842456789000","mpn":"134588842","custom":{"internal_category_id":721,"warehouse":"building
            B","box_barcode":1830135586179}}

            '
        - lang: Node
          source: >-
            const http = require("https");


            const options = {
              "method": "POST",
              "hostname": "api.commander1.com",
              "port": null,
              "path": "/v2/REPLACE_SITEID/products/bulk",
              "headers": {
                "content-type": "application/x-ndjson"
              }
            };


            const req = http.request(options, function (res) {
              const chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                const body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });


            req.write("{\"id\":\"db050bb1-810d-4420-a6fb-c1ce472a4ca9\",\"name\":\"Mug
            Commanders Act\",\"description\":\"White stoneware mug with C-Handle
            is the perfect cup for any
            beverage\",\"category_1\":\"Home\",\"category_2\":\"Kitchen\",\"category_3\":\"Accessories\",\"category_4\":\"Containers\",\"category_5\":\"Mugs\",\"tags\":[\"mugs\",\"handle\",\"white\",\"brand\"],\"condition\":\"new\",\"availability\":\"in_stock\",\"availability_date\":\"2019-02-06T17:41:31.427+01:00\",\"expiration_date\":\"2019-02-06T17:41:31.427+01:00\",\"price\":10,\"sale_price\":8,\"currency\":\"EUR\",\"image_link\":\"https://commandersact.com/images/shopping/mug_hi_res.jpg\",\"link\":\"https://commandersact.com/shopping/mug\",\"brand\":\"Commanders
            Act\",\"width\":6.4,\"length\":7.3,\"height\":9.5,\"weight\":80.7,\"size\":\"medium\",\"colors\":[\"white\",\"red\"],\"gtin\":\"134588842456789000\",\"mpn\":\"134588842\",\"custom\":{\"internal_category_id\":721,\"warehouse\":\"building
            B\",\"box_barcode\":1830135586179}}\n{\"id\":\"db050bb1-810d-4420-a6fb-c1ce472a4ca9\",\"name\":\"Mug
            Commanders Act\",\"description\":\"White stoneware mug with C-Handle
            is the perfect cup for any
            beverage\",\"category_1\":\"Home\",\"category_2\":\"Kitchen\",\"category_3\":\"Accessories\",\"category_4\":\"Containers\",\"category_5\":\"Mugs\",\"tags\":[\"mugs\",\"handle\",\"white\",\"brand\"],\"condition\":\"new\",\"availability\":\"in_stock\",\"availability_date\":\"2019-02-06T17:41:31.427+01:00\",\"expiration_date\":\"2019-02-06T17:41:31.427+01:00\",\"price\":10,\"sale_price\":8,\"currency\":\"EUR\",\"image_link\":\"https://commandersact.com/images/shopping/mug_hi_res.jpg\",\"link\":\"https://commandersact.com/shopping/mug\",\"brand\":\"Commanders
            Act\",\"width\":6.4,\"length\":7.3,\"height\":9.5,\"weight\":80.7,\"size\":\"medium\",\"colors\":[\"white\",\"red\"],\"gtin\":\"134588842456789000\",\"mpn\":\"134588842\",\"custom\":{\"internal_category_id\":721,\"warehouse\":\"building
            B\",\"box_barcode\":1830135586179}}\n{\"id\":\"db050bb1-810d-4420-a6fb-c1ce472a4ca9\",\"name\":\"Mug
            Commanders Act\",\"description\":\"White stoneware mug with C-Handle
            is the perfect cup for any
            beverage\",\"category_1\":\"Home\",\"category_2\":\"Kitchen\",\"category_3\":\"Accessories\",\"category_4\":\"Containers\",\"category_5\":\"Mugs\",\"tags\":[\"mugs\",\"handle\",\"white\",\"brand\"],\"condition\":\"new\",\"availability\":\"in_stock\",\"availability_date\":\"2019-02-06T17:41:31.427+01:00\",\"expiration_date\":\"2019-02-06T17:41:31.427+01:00\",\"price\":10,\"sale_price\":8,\"currency\":\"EUR\",\"image_link\":\"https://commandersact.com/images/shopping/mug_hi_res.jpg\",\"link\":\"https://commandersact.com/shopping/mug\",\"brand\":\"Commanders
            Act\",\"width\":6.4,\"length\":7.3,\"height\":9.5,\"weight\":80.7,\"size\":\"medium\",\"colors\":[\"white\",\"red\"],\"gtin\":\"134588842456789000\",\"mpn\":\"134588842\",\"custom\":{\"internal_category_id\":721,\"warehouse\":\"building
            B\",\"box_barcode\":1830135586179}}\n");

            req.end();
  /privacy/statistics:
    get:
      tags:
        - PrivacyStatistics
      summary: Get Statistics
      description: |
        Get data from the consent dashboard (aggregated data)
      servers:
        - url: 'https://api-internal.commander1.com/v2/{siteId}'
          description: Use internal server for this route
          variables:
            siteId:
              default: '7'
              description: this value is your site ID
      parameters:
        - name: token
          in: query
          description: >-
            Authentication token. Optional if the header "Authorization'
            parameter is used instead.
          schema:
            type: string
          required: true
          example: XXXYYZZ
        - name: 'filter[begin_date]'
          in: query
          schema:
            type: string
            format: date
          required: true
          example: '2021-04-30'
        - name: 'filter[end_date]'
          in: query
          schema:
            type: string
            format: date
          required: true
          example: '2021-05-31'
        - name: 'filter[sup_filters][location][]'
          in: query
          description: |
            Data inside and outside of the EU\
            0 : Out of EU\
            1 : EU
          schema:
            type: array
            items:
              type: integer
              enum:
                - 0
                - 1
          example: '1'
        - name: 'filter[sup_filters][device][]'
          in: query
          description: |
            Typical device types\
            0 : others\
            1 : mobile\
            2 : tablet\
            3 : desktop
          schema:
            type: array
            items:
              type: integer
              enum:
                - 0
                - 1
                - 2
                - 3
          example: '2'
      responses:
        '200':
          description: Successful
          content:
            application/vnd.api+json:
              example:
                data:
                  - type: privacy/statistic
                    id: '1'
                    attributes:
                      nb_PC_views: 1
                      nb_banner_clicks_button: 1
                      nb_banner_views: 12
                      nb_optin: 1
                      nb_optin_all: 1
                      nb_optin_all_on_click_banner: 1
                      nb_optin_category_3: 1
                      nb_optin_category_4: 1
                      nb_optin_category_5: 1
                      nb_optin_vendor_1: 1
                      nb_optin_vendor_2: 1
                      nb_optin_vendor_3: 1
                      optin_rate: 0.08333333333333333
                      optin_rate_category_3: 0.08333333333333333
                      optin_rate_category_4: 0.08333333333333333
                      optin_rate_category_5: 0.08333333333333333
                      optin_rate_vendor_1: 0.08333333333333333
                      optin_rate_vendor_2: 0.08333333333333333
                      optin_rate_vendor_3: 0.08333333333333333
                      optout_rate: 0
        '401': *ref_10
        '403': *ref_11
        '429': *ref_12
        '500': *ref_13
      x-code-samples:
        - lang: Shell
          source: >-
            http GET
            'https://api.commander1.com/v2/REPLACE_SITEID/privacy/statistics?token=SOME_STRING_VALUE&filter%5Bbegin_date%5D=SOME_STRING_VALUE&filter%5Bend_date%5D=SOME_STRING_VALUE&filter%5Bsup_filters%5D%5Blocation%5D%5B%5D=SOME_ARRAY_VALUE&filter%5Bsup_filters%5D%5Bdevice%5D%5B%5D=SOME_ARRAY_VALUE'
            \
              Authorization:'Bearer REPLACE_BEARER_TOKEN'
        - lang: Shell
          source: |-
            curl --request GET \
              --url 'https://api.commander1.com/v2/REPLACE_SITEID/privacy/statistics?token=SOME_STRING_VALUE&filter%5Bbegin_date%5D=SOME_STRING_VALUE&filter%5Bend_date%5D=SOME_STRING_VALUE&filter%5Bsup_filters%5D%5Blocation%5D%5B%5D=SOME_ARRAY_VALUE&filter%5Bsup_filters%5D%5Bdevice%5D%5B%5D=SOME_ARRAY_VALUE' \
              --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'
        - lang: Node
          source: |-
            const http = require("https");

            const options = {
              "method": "GET",
              "hostname": "api.commander1.com",
              "port": null,
              "path": "/v2/REPLACE_SITEID/privacy/statistics?token=SOME_STRING_VALUE&filter%5Bbegin_date%5D=SOME_STRING_VALUE&filter%5Bend_date%5D=SOME_STRING_VALUE&filter%5Bsup_filters%5D%5Blocation%5D%5B%5D=SOME_ARRAY_VALUE&filter%5Bsup_filters%5D%5Bdevice%5D%5B%5D=SOME_ARRAY_VALUE",
              "headers": {
                "Authorization": "Bearer REPLACE_BEARER_TOKEN"
              }
            };

            const req = http.request(options, function (res) {
              const chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                const body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.end();
  /tms/web-datalayer-variables:
    post:
      tags:
        - TmsWebDatalayerVariables
      summary: Create web datalayer variables
      operationId: TagWebDatalayerVariablesStore
      description: |
        ### Usage

          This endpoint creates new web datalayer variables
      requestBody:
        required: true
        description: 'Variable as JSON:api strings'
        content:
          application/vnd.api+json:
            schema:
              properties:
                data:
                  type: object
                  required:
                    - type
                    - attributes
                  properties:
                    type:
                      type: string
                      enum:
                        - tms/web-datalayer-variables
                    attributes:
                      type: object
                      required: *ref_21
                      description: |
                        Tag web datalayer variables
                      properties: *ref_22
                      example: *ref_23
                    relationships:
                      type: object
                      properties:
                        category: *ref_24
            examples:
              200.main.jsonapi:
                value:
                  data:
                    type: tms/web-datalayer-variables
                    attributes: *ref_23
                    relationships:
                      category: *ref_25
      responses:
        '200':
          description: Successful
          content:
            application/vnd.api+json:
              schema:
                properties:
                  data:
                    type: object
                    required:
                      - type
                      - id
                      - attributes
                    properties:
                      type:
                        type: string
                        enum:
                          - tms/web-datalayer-variables
                      id:
                        type: integer
                      attributes:
                        type: object
                        required: *ref_21
                        description: |
                          Tag web datalayer variables
                        properties: *ref_22
                        example: *ref_23
                      relationships:
                        type: object
                        properties:
                          category: *ref_24
              example:
                data:
                  type: tms/web-datalayer-variables
                  id: '1'
                  attributes: *ref_23
                  relationships:
                    category: *ref_25
        '401': *ref_10
        '403': *ref_11
        '429': *ref_12
        '500': *ref_13
      x-code-samples:
        - lang: Shell
          source: >-
            http POST
            https://api.commander1.com/v2/REPLACE_SITEID/tms/web-datalayer-variables
            \
              Authorization:'Bearer REPLACE_BEARER_TOKEN' \
              content-type:'application/vnd.api+json'
        - lang: Shell
          source: |-
            curl --request POST \
              --url https://api.commander1.com/v2/REPLACE_SITEID/tms/web-datalayer-variables \
              --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \
              --header 'content-type: application/vnd.api+json'
        - lang: Node
          source: |-
            const http = require("https");

            const options = {
              "method": "POST",
              "hostname": "api.commander1.com",
              "port": null,
              "path": "/v2/REPLACE_SITEID/tms/web-datalayer-variables",
              "headers": {
                "content-type": "application/vnd.api+json",
                "Authorization": "Bearer REPLACE_BEARER_TOKEN"
              }
            };

            const req = http.request(options, function (res) {
              const chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                const body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.end();
  '/tms/web-datalayer-variables/{id}':
    delete:
      tags:
        - TmsWebDatalayerVariables
      summary: Delete web datalayer variables
      operationId: TagWebDatalayerVariablesDestroy
      description: |
        ### Usage

          This endpoint deletes web datalayer variables
      parameters:
        - *ref_14
      responses:
        '204': *ref_26
        '401': *ref_10
        '403': *ref_11
        '429': *ref_12
        '500': *ref_13
      x-code-samples:
        - lang: Shell
          source: >-
            http DELETE
            https://api.commander1.com/v2/REPLACE_SITEID/tms/web-datalayer-variables/REPLACE_ID
            \
              Authorization:'Bearer REPLACE_BEARER_TOKEN'
        - lang: Shell
          source: |-
            curl --request DELETE \
              --url https://api.commander1.com/v2/REPLACE_SITEID/tms/web-datalayer-variables/REPLACE_ID \
              --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'
        - lang: Node
          source: |-
            const http = require("https");

            const options = {
              "method": "DELETE",
              "hostname": "api.commander1.com",
              "port": null,
              "path": "/v2/REPLACE_SITEID/tms/web-datalayer-variables/REPLACE_ID",
              "headers": {
                "Authorization": "Bearer REPLACE_BEARER_TOKEN"
              }
            };

            const req = http.request(options, function (res) {
              const chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                const body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.end();
  /tms/web-internal-variables:
    post:
      tags:
        - TmsWebInternalVariables
      summary: Create web internal variables
      operationId: TagWebInternalVariablesStore
      description: |
        ### Usage

          This endpoint creates new web internal variables
      requestBody:
        required: true
        description: 'Variable as JSON:api strings'
        content:
          application/vnd.api+json:
            schema:
              properties:
                data:
                  type: object
                  required:
                    - type
                    - attributes
                  properties:
                    type:
                      type: string
                      enum:
                        - tms/web-internal-variables
                    attributes:
                      type: object
                      required: *ref_27
                      description: |
                        Tag web internal variables
                      properties: *ref_28
                      example: *ref_29
                    relationships:
                      type: object
                      properties:
                        containers:
                          description: >-
                            List of containers linked with variable (empty = all
                            containers)
                          type: object
                          required: *ref_30
                          properties: *ref_31
            examples:
              200.main.jsonapi:
                value:
                  data:
                    type: tms/web-internal-variables
                    attributes: *ref_29
                    relationships:
                      containers: *ref_32
      responses:
        '200':
          description: Successful
          content:
            application/vnd.api+json:
              schema:
                properties:
                  data:
                    type: object
                    required:
                      - type
                      - id
                      - attributes
                    properties:
                      type:
                        type: string
                        enum:
                          - tms/web-internal-variables
                      id:
                        type: integer
                      attributes:
                        type: object
                        required: *ref_27
                        description: |
                          Tag web internal variables
                        properties: *ref_28
                        example: *ref_29
                      relationships:
                        type: object
                        containers: *ref_33
              example:
                data:
                  type: tms/web-internal-variables
                  id: '1'
                  attributes: *ref_29
                  relationships:
                    containers: *ref_32
        '401': *ref_10
        '403': *ref_11
        '429': *ref_12
        '500': *ref_13
      x-code-samples:
        - lang: Shell
          source: >-
            http POST
            https://api.commander1.com/v2/REPLACE_SITEID/tms/web-internal-variables
            \
              Authorization:'Bearer REPLACE_BEARER_TOKEN' \
              content-type:'application/vnd.api+json'
        - lang: Shell
          source: |-
            curl --request POST \
              --url https://api.commander1.com/v2/REPLACE_SITEID/tms/web-internal-variables \
              --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \
              --header 'content-type: application/vnd.api+json'
        - lang: Node
          source: |-
            const http = require("https");

            const options = {
              "method": "POST",
              "hostname": "api.commander1.com",
              "port": null,
              "path": "/v2/REPLACE_SITEID/tms/web-internal-variables",
              "headers": {
                "content-type": "application/vnd.api+json",
                "Authorization": "Bearer REPLACE_BEARER_TOKEN"
              }
            };

            const req = http.request(options, function (res) {
              const chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                const body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.end();
  '/tms/web-internal-variables/{id}':
    delete:
      tags:
        - TmsWebInternalVariables
      summary: Delete web internal variables
      operationId: TagWebInternalVariablesDestroy
      description: |
        ### Usage

          This endpoint deletes web internal variables
      parameters:
        - *ref_14
      responses:
        '204': *ref_26
        '401': *ref_10
        '403': *ref_11
        '429': *ref_12
        '500': *ref_13
      x-code-samples:
        - lang: Shell
          source: >-
            http DELETE
            https://api.commander1.com/v2/REPLACE_SITEID/tms/web-internal-variables/REPLACE_ID
            \
              Authorization:'Bearer REPLACE_BEARER_TOKEN'
        - lang: Shell
          source: |-
            curl --request DELETE \
              --url https://api.commander1.com/v2/REPLACE_SITEID/tms/web-internal-variables/REPLACE_ID \
              --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'
        - lang: Node
          source: |-
            const http = require("https");

            const options = {
              "method": "DELETE",
              "hostname": "api.commander1.com",
              "port": null,
              "path": "/v2/REPLACE_SITEID/tms/web-internal-variables/REPLACE_ID",
              "headers": {
                "Authorization": "Bearer REPLACE_BEARER_TOKEN"
              }
            };

            const req = http.request(options, function (res) {
              const chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                const body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.end();
  /tms/serverside-datalayer-variables:
    post:
      tags:
        - TmsServersideDatalayerVariables
      summary: Create server-side datalayer variables
      operationId: TagServersideDatalayerVariablesStore
      description: |
        ### Usage

          This endpoint creates new server-side datalayer variables
      requestBody:
        required: true
        description: 'Variable as JSON:api strings'
        content:
          application/vnd.api+json:
            schema:
              properties:
                data:
                  type: object
                  required:
                    - type
                    - attributes
                  properties:
                    type:
                      type: string
                      enum:
                        - tms/serverside-datalayer-variables
                    attributes:
                      type: object
                      required: *ref_34
                      description: |
                        Tag server-side datalayer variables
                      properties: *ref_35
                      example: *ref_36
                    relationships:
                      type: object
                      properties:
                        category: *ref_37
            examples:
              200.main.jsonapi:
                value:
                  data:
                    type: tms/serverside-datalayer-variables
                    attributes: *ref_36
                  relationships:
                    category: *ref_38
      responses:
        '200':
          description: Successful
          content:
            application/vnd.api+json:
              schema:
                properties:
                  data:
                    type: object
                    required:
                      - type
                      - id
                      - attributes
                    properties:
                      type:
                        type: string
                        enum:
                          - tms/serverside-datalayer-variables
                      id:
                        type: integer
                      attributes:
                        type: object
                        required: *ref_34
                        description: |
                          Tag server-side datalayer variables
                        properties: *ref_35
                        example: *ref_36
                      relationships:
                        type: object
                        properties:
                          category: *ref_37
              example:
                data:
                  type: tms/serverside-datalayer-variables
                  id: '1'
                  attributes: *ref_36
                  relationships:
                    category: *ref_38
        '401': *ref_10
        '403': *ref_11
        '429': *ref_12
        '500': *ref_13
      x-code-samples:
        - lang: Shell
          source: >-
            http POST
            https://api.commander1.com/v2/REPLACE_SITEID/tms/serverside-datalayer-variables
            \
              Authorization:'Bearer REPLACE_BEARER_TOKEN' \
              content-type:'application/vnd.api+json'
        - lang: Shell
          source: |-
            curl --request POST \
              --url https://api.commander1.com/v2/REPLACE_SITEID/tms/serverside-datalayer-variables \
              --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \
              --header 'content-type: application/vnd.api+json'
        - lang: Node
          source: |-
            const http = require("https");

            const options = {
              "method": "POST",
              "hostname": "api.commander1.com",
              "port": null,
              "path": "/v2/REPLACE_SITEID/tms/serverside-datalayer-variables",
              "headers": {
                "content-type": "application/vnd.api+json",
                "Authorization": "Bearer REPLACE_BEARER_TOKEN"
              }
            };

            const req = http.request(options, function (res) {
              const chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                const body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.end();
  '/tms/serverside-datalayer-variables/{id}':
    delete:
      tags:
        - TmsServersideDatalayerVariables
      summary: Delete server-side datalayer variables
      operationId: TagServersideDatalayerVariablesDestroy
      description: |
        ### Usage

          This endpoint deletes server-side datalayer variables
      parameters:
        - *ref_14
      responses:
        '204': *ref_26
        '401': *ref_10
        '403': *ref_11
        '429': *ref_12
        '500': *ref_13
      x-code-samples:
        - lang: Shell
          source: >-
            http DELETE
            https://api.commander1.com/v2/REPLACE_SITEID/tms/serverside-datalayer-variables/REPLACE_ID
            \
              Authorization:'Bearer REPLACE_BEARER_TOKEN'
        - lang: Shell
          source: |-
            curl --request DELETE \
              --url https://api.commander1.com/v2/REPLACE_SITEID/tms/serverside-datalayer-variables/REPLACE_ID \
              --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'
        - lang: Node
          source: |-
            const http = require("https");

            const options = {
              "method": "DELETE",
              "hostname": "api.commander1.com",
              "port": null,
              "path": "/v2/REPLACE_SITEID/tms/serverside-datalayer-variables/REPLACE_ID",
              "headers": {
                "Authorization": "Bearer REPLACE_BEARER_TOKEN"
              }
            };

            const req = http.request(options, function (res) {
              const chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                const body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.end();
  /tms/serverside-internal-variables:
    post:
      tags:
        - TmsServersideInternalVariables
      summary: Create server-side internal variables
      operationId: TagServersideInternalVariablesStore
      description: |
        ### Usage

          This endpoint creates new server-side internal variables
      requestBody:
        required: true
        description: 'Variable as JSON:api strings'
        content:
          application/vnd.api+json:
            schema:
              properties:
                data:
                  type: object
                  required:
                    - type
                    - attributes
                  properties:
                    type:
                      type: string
                      enum:
                        - tms/serverside-internal-variables
                    attributes:
                      type: object
                      required: *ref_39
                      description: |
                        Tag internal variables
                      properties: *ref_40
                      example: *ref_41
            examples:
              200.main.jsonapi:
                value:
                  data:
                    type: tms/serverside-internal-variables
                    attributes: *ref_41
      responses:
        '200':
          description: Successful
          content:
            application/vnd.api+json:
              schema:
                properties:
                  data:
                    type: object
                    required:
                      - type
                      - id
                      - attributes
                    properties:
                      type:
                        type: string
                        enum:
                          - tms/serverside-internal-variables
                      id:
                        type: integer
                      attributes:
                        type: object
                        required: *ref_39
                        description: |
                          Tag internal variables
                        properties: *ref_40
                        example: *ref_41
              example:
                data:
                  type: tms/serverside-internal-variables
                  id: '1'
                  attributes: *ref_41
        '401': *ref_10
        '403': *ref_11
        '429': *ref_12
        '500': *ref_13
      x-code-samples:
        - lang: Shell
          source: >-
            http POST
            https://api.commander1.com/v2/REPLACE_SITEID/tms/serverside-internal-variables
            \
              Authorization:'Bearer REPLACE_BEARER_TOKEN' \
              content-type:'application/vnd.api+json'
        - lang: Shell
          source: |-
            curl --request POST \
              --url https://api.commander1.com/v2/REPLACE_SITEID/tms/serverside-internal-variables \
              --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \
              --header 'content-type: application/vnd.api+json'
        - lang: Node
          source: |-
            const http = require("https");

            const options = {
              "method": "POST",
              "hostname": "api.commander1.com",
              "port": null,
              "path": "/v2/REPLACE_SITEID/tms/serverside-internal-variables",
              "headers": {
                "content-type": "application/vnd.api+json",
                "Authorization": "Bearer REPLACE_BEARER_TOKEN"
              }
            };

            const req = http.request(options, function (res) {
              const chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                const body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.end();
  '/tms/serverside-internal-variables/{id}':
    delete:
      tags:
        - TmsServersideInternalVariables
      summary: Delete server-side internal datalayer variables
      operationId: TagServersideInternalVariablesDestroy
      description: |
        ### Usage

          This endpoint deletes server-side internal datalayer variables
      parameters:
        - *ref_14
      responses:
        '204': *ref_26
        '401': *ref_10
        '403': *ref_11
        '429': *ref_12
        '500': *ref_13
      x-code-samples:
        - lang: Shell
          source: >-
            http DELETE
            https://api.commander1.com/v2/REPLACE_SITEID/tms/serverside-internal-variables/REPLACE_ID
            \
              Authorization:'Bearer REPLACE_BEARER_TOKEN'
        - lang: Shell
          source: |-
            curl --request DELETE \
              --url https://api.commander1.com/v2/REPLACE_SITEID/tms/serverside-internal-variables/REPLACE_ID \
              --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'
        - lang: Node
          source: |-
            const http = require("https");

            const options = {
              "method": "DELETE",
              "hostname": "api.commander1.com",
              "port": null,
              "path": "/v2/REPLACE_SITEID/tms/serverside-internal-variables/REPLACE_ID",
              "headers": {
                "Authorization": "Bearer REPLACE_BEARER_TOKEN"
              }
            };

            const req = http.request(options, function (res) {
              const chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                const body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.end();
  /tms/web-triggers:
    post:
      tags:
        - TmsWebTriggers
      summary: Create a web trigger
      operationId: TagWebTriggersStore
      description: |
        ### Usage

          This endpoint creates a new trigger
      parameters:
        - in: query
          name: include
          description: >
            > Available relations: [Container](#tag/TmsContainer) -
            [Tags](#tag/TmsWebTag)
          schema:
            type: array
            items:
              type: string
              enum:
                - container
                - tags
          explode: false
          style: form
          example:
            - container
            - tags
      requestBody:
        required: true
        description: 'Variable as JSON:api strings'
        content:
          application/vnd.api+json:
            schema:
              properties:
                data:
                  type: object
                  required:
                    - type
                    - attributes
                    - relationships
                  properties:
                    type:
                      type: string
                      enum:
                        - tms/web-triggers
                    attributes:
                      type: object
                      required: *ref_42
                      description: |
                        Tag Web triggers
                      properties: *ref_43
                      example: *ref_44
                    relationships:
                      type: object
                      required:
                        - container
                        - tags
                      properties:
                        container: *ref_45
                        tags: *ref_46
            examples:
              200.main.jsonapi:
                value:
                  data:
                    type: tms/web-triggers
                    attributes: *ref_44
                    relationships:
                      container: *ref_47
                      tags: *ref_48
      responses:
        '200':
          description: Successful
          content:
            application/vnd.api+json:
              schema:
                properties:
                  data:
                    type: object
                    required:
                      - type
                      - id
                      - attributes
                    properties:
                      type:
                        type: string
                      id:
                        type: integer
                      attributes:
                        type: object
                        required: *ref_42
                        description: |
                          Tag Web triggers
                        properties: *ref_43
                        example: *ref_44
                      relationships:
                        type: object
                        container: *ref_45
                        tags: *ref_46
              example:
                data:
                  type: tms/web-triggers
                  id: '1'
                  attributes: *ref_44
                  relationships:
                    container: *ref_47
                    tags: *ref_48
        '401': *ref_10
        '403': *ref_11
        '429': *ref_12
        '500': *ref_13
      x-code-samples:
        - lang: Shell
          source: >-
            http POST
            'https://api.commander1.com/v2/REPLACE_SITEID/tms/web-triggers?include=SOME_ARRAY_VALUE'
            \
              Authorization:'Bearer REPLACE_BEARER_TOKEN' \
              content-type:'application/vnd.api+json'
        - lang: Shell
          source: |-
            curl --request POST \
              --url 'https://api.commander1.com/v2/REPLACE_SITEID/tms/web-triggers?include=SOME_ARRAY_VALUE' \
              --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \
              --header 'content-type: application/vnd.api+json'
        - lang: Node
          source: |-
            const http = require("https");

            const options = {
              "method": "POST",
              "hostname": "api.commander1.com",
              "port": null,
              "path": "/v2/REPLACE_SITEID/tms/web-triggers?include=SOME_ARRAY_VALUE",
              "headers": {
                "content-type": "application/vnd.api+json",
                "Authorization": "Bearer REPLACE_BEARER_TOKEN"
              }
            };

            const req = http.request(options, function (res) {
              const chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                const body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.end();
  'tms/web-triggers/{id}':
    delete:
      tags:
        - TmsWebTriggers
      summary: Delete web triggers
      operationId: TmsWebTriggersdelete
      description: |-
        ### Usage

        Delete web triggers
      parameters:
        - *ref_14
      responses:
        '204': *ref_26
        '401': *ref_10
        '403': *ref_11
        '429': *ref_12
        '500': *ref_13
      x-code-samples:
        - lang: Shell
          source: >-
            http DELETE
            https://api.commander1.com/v2/REPLACE_SITEIDtms/web-triggers/REPLACE_ID
            \
              Authorization:'Bearer REPLACE_BEARER_TOKEN'
        - lang: Shell
          source: |-
            curl --request DELETE \
              --url https://api.commander1.com/v2/REPLACE_SITEIDtms/web-triggers/REPLACE_ID \
              --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'
        - lang: Node
          source: |-
            const http = require("https");

            const options = {
              "method": "DELETE",
              "hostname": "api.commander1.com",
              "port": null,
              "path": "/v2/REPLACE_SITEIDtms/web-triggers/REPLACE_ID",
              "headers": {
                "Authorization": "Bearer REPLACE_BEARER_TOKEN"
              }
            };

            const req = http.request(options, function (res) {
              const chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                const body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.end();
  tms/web-perimeters:
    post:
      .relationships:
        type: object
        required:
          - container
          - tags
        properties:
          container: *ref_45
          tags: *ref_46
          variable: *ref_49
      .relationshipsExample:
        container: *ref_47
        tags: *ref_48
        variable: *ref_50
      tags:
        - TmsWebPerimeters
      summary: Create web perimeters
      operationId: TmsWebPerimetersstore
      description: |-
        ### Usage

        Create web perimeters
      parameters: []
      requestBody:
        description: 'Variable as JSON:api strings'
        required: true
        content:
          application/vnd.api+json:
            schema:
              properties:
                data:
                  type: object
                  required:
                    - type
                    - attributes
                    - relationships
                  properties:
                    type:
                      type: string
                      enum:
                        - tms/web-perimeters
                    attributes:
                      type: object
                      required: *ref_51
                      properties: *ref_52
                      example: *ref_53
                    relationships:
                      type: object
                      required:
                        - container
                        - tags
                      properties:
                        container: *ref_45
                        tags: *ref_46
                        variable: *ref_49
            examples:
              200.main.jsonapi:
                value:
                  data:
                    type: tms/web-perimeters
                    attributes: *ref_53
                    relationships:
                      container: *ref_47
                      tags: *ref_48
                      variable: *ref_50
      responses:
        '200':
          description: Successful
          content:
            application/vnd.api+json:
              schema:
                properties:
                  data:
                    type: object
                    required:
                      - type
                      - id
                      - attributes
                      - relationships
                    properties:
                      type:
                        type: string
                        enum:
                          - tms/web-perimeters
                      id:
                        type: integer
                      attributes:
                        type: object
                        required: *ref_51
                        properties: *ref_52
                        example: *ref_53
                      relationships:
                        type: object
                        required:
                          - container
                          - tags
                        properties:
                          container: *ref_45
                          tags: *ref_46
                          variable: *ref_49
              example:
                data:
                  type: tms/web-perimeters
                  id: '1'
                  attributes: *ref_53
                  relationships:
                    container: *ref_47
                    tags: *ref_48
                    variable: *ref_50
        '401': *ref_10
        '403': *ref_11
        '429': *ref_12
        '500': *ref_13
      x-code-samples:
        - lang: Shell
          source: >-
            http POST
            https://api.commander1.com/v2/REPLACE_SITEIDtms/web-perimeters \
              Authorization:'Bearer REPLACE_BEARER_TOKEN' \
              content-type:'application/vnd.api+json'
        - lang: Shell
          source: |-
            curl --request POST \
              --url https://api.commander1.com/v2/REPLACE_SITEIDtms/web-perimeters \
              --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \
              --header 'content-type: application/vnd.api+json'
        - lang: Node
          source: |-
            const http = require("https");

            const options = {
              "method": "POST",
              "hostname": "api.commander1.com",
              "port": null,
              "path": "/v2/REPLACE_SITEIDtms/web-perimeters",
              "headers": {
                "content-type": "application/vnd.api+json",
                "Authorization": "Bearer REPLACE_BEARER_TOKEN"
              }
            };

            const req = http.request(options, function (res) {
              const chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                const body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.end();
  tms/web-constraints:
    post:
      tags:
        - TmsWebConstraints
      summary: Store web constraints
      operationId: TmsWebConstraintsstore
      description: |-
        ### Usage

        Store web constraints
      parameters: []
      .relationships:
        type: object
        required:
          - container
          - tags
          - trigger
        properties:
          container: *ref_45
          tags: *ref_46
          trigger: *ref_54
          variable: *ref_49
      .relationshipsExample:
        container: *ref_47
        tags: *ref_48
        trigger: *ref_55
        variable: *ref_50
      requestBody:
        description: 'Variable as JSON:api strings'
        required: true
        content:
          application/vnd.api+json:
            schema:
              properties:
                data:
                  type: object
                  required:
                    - type
                    - attributes
                    - relationships
                  properties:
                    type:
                      type: string
                      enum:
                        - tms/web-constraints
                    attributes:
                      type: object
                      required: *ref_51
                      properties: *ref_52
                      example: *ref_53
                    relationships:
                      type: object
                      required:
                        - container
                        - tags
                        - trigger
                      properties:
                        container: *ref_45
                        tags: *ref_46
                        trigger: *ref_54
                        variable: *ref_49
            examples:
              200.main.jsonapi:
                value:
                  data:
                    type: tms/web-constraints
                    attributes: *ref_53
                    relationships:
                      container: *ref_47
                      tags: *ref_48
                      trigger: *ref_55
                      variable: *ref_50
      responses:
        '200':
          description: Successful
          content:
            application/vnd.api+json:
              schema:
                properties:
                  data:
                    type: object
                    required:
                      - type
                      - id
                      - attributes
                      - relationships
                    properties:
                      type:
                        type: string
                        enum:
                          - tms/web-constraints
                      id:
                        type: integer
                      attributes:
                        type: object
                        required: *ref_51
                        properties: *ref_52
                        example: *ref_53
                      relationships:
                        type: object
                        required:
                          - container
                          - tags
                          - trigger
                        properties:
                          container: *ref_45
                          tags: *ref_46
                          trigger: *ref_54
                          variable: *ref_49
              example:
                data:
                  type: tms/web-constraints
                  id: '1'
                  attributes: *ref_53
                  relationships:
                    container: *ref_47
                    tags: *ref_48
                    trigger: *ref_55
                    variable: *ref_50
        '401': *ref_10
        '403': *ref_11
        '429': *ref_12
        '500': *ref_13
      x-code-samples:
        - lang: Shell
          source: >-
            http POST
            https://api.commander1.com/v2/REPLACE_SITEIDtms/web-constraints \
              Authorization:'Bearer REPLACE_BEARER_TOKEN' \
              content-type:'application/vnd.api+json'
        - lang: Shell
          source: |-
            curl --request POST \
              --url https://api.commander1.com/v2/REPLACE_SITEIDtms/web-constraints \
              --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \
              --header 'content-type: application/vnd.api+json'
        - lang: Node
          source: |-
            const http = require("https");

            const options = {
              "method": "POST",
              "hostname": "api.commander1.com",
              "port": null,
              "path": "/v2/REPLACE_SITEIDtms/web-constraints",
              "headers": {
                "content-type": "application/vnd.api+json",
                "Authorization": "Bearer REPLACE_BEARER_TOKEN"
              }
            };

            const req = http.request(options, function (res) {
              const chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                const body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.end();
  'tms/web-constraints/{id}':
    delete:
      tags:
        - TmsWebConstraints
      summary: Destroy web constraints
      operationId: TmsWebConstraintsdestroy
      description: |-
        ### Usage

        Destroy web constraints
      parameters:
        - *ref_14
      responses:
        '204': *ref_26
        '401': *ref_10
        '403': *ref_11
        '429': *ref_12
        '500': *ref_13
      x-code-samples:
        - lang: Shell
          source: >-
            http DELETE
            https://api.commander1.com/v2/REPLACE_SITEIDtms/web-constraints/REPLACE_ID
            \
              Authorization:'Bearer REPLACE_BEARER_TOKEN'
        - lang: Shell
          source: |-
            curl --request DELETE \
              --url https://api.commander1.com/v2/REPLACE_SITEIDtms/web-constraints/REPLACE_ID \
              --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'
        - lang: Node
          source: |-
            const http = require("https");

            const options = {
              "method": "DELETE",
              "hostname": "api.commander1.com",
              "port": null,
              "path": "/v2/REPLACE_SITEIDtms/web-constraints/REPLACE_ID",
              "headers": {
                "Authorization": "Bearer REPLACE_BEARER_TOKEN"
              }
            };

            const req = http.request(options, function (res) {
              const chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                const body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.end();
  'tms/web-perimeters/{id}':
    delete:
      tags:
        - TmsWebPerimeters
      summary: Destroy web perimeters
      operationId: TmsWebPerimetersdestroy
      description: |-
        ### Usage

        Destroy web perimeters
      parameters:
        - *ref_14
      responses:
        '204': *ref_26
        '401': *ref_10
        '403': *ref_11
        '429': *ref_12
        '500': *ref_13
      x-code-samples:
        - lang: Shell
          source: >-
            http DELETE
            https://api.commander1.com/v2/REPLACE_SITEIDtms/web-perimeters/REPLACE_ID
            \
              Authorization:'Bearer REPLACE_BEARER_TOKEN'
        - lang: Shell
          source: |-
            curl --request DELETE \
              --url https://api.commander1.com/v2/REPLACE_SITEIDtms/web-perimeters/REPLACE_ID \
              --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'
        - lang: Node
          source: |-
            const http = require("https");

            const options = {
              "method": "DELETE",
              "hostname": "api.commander1.com",
              "port": null,
              "path": "/v2/REPLACE_SITEIDtms/web-perimeters/REPLACE_ID",
              "headers": {
                "Authorization": "Bearer REPLACE_BEARER_TOKEN"
              }
            };

            const req = http.request(options, function (res) {
              const chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                const body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.end();
  tms/serverside-constraints:
    post:
      tags:
        - TmsServersideConstraints
      summary: Store serverside constraints
      operationId: TmsServersideConstraintsstore
      description: |-
        ### Usage

        Store serverside constraints
      parameters: []
      .relationships:
        type: object
        required:
          - container
          - tags
          - variable
        properties:
          container: *ref_56
          tags: *ref_57
          variable: *ref_58
      .relationshipsExample:
        container: *ref_59
        tags: *ref_60
        variable: *ref_61
      requestBody:
        description: 'Variable as JSON:api strings'
        required: true
        content:
          application/vnd.api+json:
            schema:
              properties:
                data:
                  type: object
                  required:
                    - type
                    - attributes
                    - relationships
                  properties:
                    type:
                      type: string
                      enum:
                        - tms/serverside-constraints
                    attributes:
                      type: object
                      required: *ref_62
                      properties: *ref_63
                      example: *ref_64
                    relationships:
                      type: object
                      required:
                        - container
                        - tags
                        - variable
                      properties:
                        container: *ref_56
                        tags: *ref_57
                        variable: *ref_58
            examples:
              200.main.jsonapi:
                value:
                  data:
                    type: tms/serverside-constraints
                    attributes: *ref_64
                    relationships:
                      container: *ref_59
                      tags: *ref_60
                      variable: *ref_61
      responses:
        '200':
          description: Successful
          content:
            application/vnd.api+json:
              schema:
                properties:
                  data:
                    type: object
                    required:
                      - type
                      - id
                      - attributes
                      - relationships
                    properties:
                      type:
                        type: string
                        enum:
                          - tms/serverside-constraints
                      id:
                        type: integer
                      attributes:
                        type: object
                        required: *ref_62
                        properties: *ref_63
                        example: *ref_64
                      relationships:
                        type: object
                        required:
                          - container
                          - tags
                          - variable
                        properties:
                          container: *ref_56
                          tags: *ref_57
                          variable: *ref_58
              example:
                data:
                  type: tms/serverside-constraints
                  id: '1'
                  attributes: *ref_64
                  relationships:
                    container: *ref_59
                    tags: *ref_60
                    variable: *ref_61
        '401': *ref_10
        '403': *ref_11
        '429': *ref_12
        '500': *ref_13
      x-code-samples:
        - lang: Shell
          source: >-
            http POST
            https://api.commander1.com/v2/REPLACE_SITEIDtms/serverside-constraints
            \
              Authorization:'Bearer REPLACE_BEARER_TOKEN' \
              content-type:'application/vnd.api+json'
        - lang: Shell
          source: |-
            curl --request POST \
              --url https://api.commander1.com/v2/REPLACE_SITEIDtms/serverside-constraints \
              --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \
              --header 'content-type: application/vnd.api+json'
        - lang: Node
          source: |-
            const http = require("https");

            const options = {
              "method": "POST",
              "hostname": "api.commander1.com",
              "port": null,
              "path": "/v2/REPLACE_SITEIDtms/serverside-constraints",
              "headers": {
                "content-type": "application/vnd.api+json",
                "Authorization": "Bearer REPLACE_BEARER_TOKEN"
              }
            };

            const req = http.request(options, function (res) {
              const chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                const body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.end();
  'tms/serverside-constraints/{id}':
    delete:
      tags:
        - TmsServersideConstraints
      summary: Destroy serverside constraints
      operationId: TmsServersideConstraintsdestroy
      description: |-
        ### Usage

        Destroy serverside constraints
      parameters:
        - *ref_14
      responses:
        '204': *ref_26
        '401': *ref_10
        '403': *ref_11
        '429': *ref_12
        '500': *ref_13
      x-code-samples:
        - lang: Shell
          source: >-
            http DELETE
            https://api.commander1.com/v2/REPLACE_SITEIDtms/serverside-constraints/REPLACE_ID
            \
              Authorization:'Bearer REPLACE_BEARER_TOKEN'
        - lang: Shell
          source: |-
            curl --request DELETE \
              --url https://api.commander1.com/v2/REPLACE_SITEIDtms/serverside-constraints/REPLACE_ID \
              --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'
        - lang: Node
          source: |-
            const http = require("https");

            const options = {
              "method": "DELETE",
              "hostname": "api.commander1.com",
              "port": null,
              "path": "/v2/REPLACE_SITEIDtms/serverside-constraints/REPLACE_ID",
              "headers": {
                "Authorization": "Bearer REPLACE_BEARER_TOKEN"
              }
            };

            const req = http.request(options, function (res) {
              const chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                const body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.end();
  admin/workspace:
    post:
      tags:
        - AdminWorkspace
      summary: Store workspace
      operationId: AdminWorkspacestore
      description: |-
        ### Usage

        Store workspace
      parameters: []
      .relationships:
        type: object
        required:
          - customer
        properties:
          customer: *ref_65
      .relationshipsExample: *ref_66
      requestBody:
        required: true
        content:
          application/vnd.api+json:
            schema:
              properties:
                data:
                  type: object
                  required:
                    - type
                    - id
                    - attributes
                    - relationships
                  properties:
                    type:
                      type: string
                      enum:
                        - admin/workspace
                    id:
                      type: integer
                    attributes:
                      type: object
                      required: *ref_67
                      properties: *ref_68
                      example: *ref_69
                    relationships:
                      type: object
                      required:
                        - customer
                      properties:
                        customer: *ref_65
            examples:
              200.main.jsonapi:
                value:
                  data:
                    type: admin/workspace
                    id: 1
                    attributes: *ref_69
                    relationships: *ref_66
      responses:
        '200':
          content:
            application/vnd.api+json:
              schema:
                properties:
                  data:
                    type: object
                    required:
                      - type
                      - id
                      - attributes
                      - relationships
                    properties:
                      type:
                        type: string
                        enum:
                          - workspace
                      id:
                        type: integer
                      attributes:
                        type: object
                        required: *ref_67
                        properties: *ref_68
                        example: *ref_69
                      relationships:
                        type: object
                        required:
                          - customer
                        properties:
                          customer: *ref_65
              example:
                data:
                  type: admin/workspace
                  attributes: *ref_69
                  relationships: *ref_66
                  id: 1
          description: Successful
        '401': *ref_10
        '403': *ref_11
        '429': *ref_12
        '500': *ref_13
      x-code-samples:
        - lang: Shell
          source: >-
            http POST
            https://api.commander1.com/v2/REPLACE_SITEIDadmin/workspace \
              Authorization:'Bearer REPLACE_BEARER_TOKEN' \
              content-type:'application/vnd.api+json'
        - lang: Shell
          source: |-
            curl --request POST \
              --url https://api.commander1.com/v2/REPLACE_SITEIDadmin/workspace \
              --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \
              --header 'content-type: application/vnd.api+json'
        - lang: Node
          source: |-
            const http = require("https");

            const options = {
              "method": "POST",
              "hostname": "api.commander1.com",
              "port": null,
              "path": "/v2/REPLACE_SITEIDadmin/workspace",
              "headers": {
                "content-type": "application/vnd.api+json",
                "Authorization": "Bearer REPLACE_BEARER_TOKEN"
              }
            };

            const req = http.request(options, function (res) {
              const chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                const body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.end();
  'admin/workspace/{id}':
    delete:
      tags:
        - AdminWorkspace
      summary: Destroy workspace
      operationId: AdminWorkspacedestroy
      description: |-
        ### Usage

        Destroy workspace
      parameters:
        - *ref_14
      responses:
        '204': *ref_26
        '401': *ref_10
        '403': *ref_11
        '429': *ref_12
        '500': *ref_13
      x-code-samples:
        - lang: Shell
          source: >-
            http DELETE
            https://api.commander1.com/v2/REPLACE_SITEIDadmin/workspace/REPLACE_ID
            \
              Authorization:'Bearer REPLACE_BEARER_TOKEN'
        - lang: Shell
          source: |-
            curl --request DELETE \
              --url https://api.commander1.com/v2/REPLACE_SITEIDadmin/workspace/REPLACE_ID \
              --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'
        - lang: Node
          source: |-
            const http = require("https");

            const options = {
              "method": "DELETE",
              "hostname": "api.commander1.com",
              "port": null,
              "path": "/v2/REPLACE_SITEIDadmin/workspace/REPLACE_ID",
              "headers": {
                "Authorization": "Bearer REPLACE_BEARER_TOKEN"
              }
            };

            const req = http.request(options, function (res) {
              const chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                const body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.end();
  tms/web-datalayer-variable-categories:
    post:
      tags:
        - TmsWebDatalayerVariableCategories
      summary: Store web datalayer variable categories
      operationId: TmsWebDatalayerVariableCategoriesstore
      description: |-
        ### Usage

        Store web datalayer variable categories
      parameters: []
      requestBody:
        required: true
        content:
          application/vnd.api+json:
            schema:
              properties:
                data:
                  type: object
                  required:
                    - type
                    - attributes
                  properties:
                    type:
                      type: string
                      enum:
                        - tms/web-datalayer-variable-categories
                    attributes:
                      type: object
                      required: *ref_70
                      properties: *ref_71
                      example: *ref_72
            examples:
              200.main.jsonapi:
                value:
                  data:
                    type: tms/web-datalayer-variable-categories
                    attributes: *ref_72
      responses:
        '200':
          content:
            application/vnd.api+json:
              schema:
                properties:
                  data:
                    type: object
                    required:
                      - type
                      - attributes
                      - id
                    properties:
                      type:
                        type: string
                        enum:
                          - tms/web-datalayer-variable-categories
                      attributes:
                        type: object
                        required: *ref_70
                        properties: *ref_71
                        example: *ref_72
                      id:
                        type: integer
              example:
                data:
                  type: tms/web-datalayer-variable-categories
                  attributes: *ref_72
                  id: 1
          description: Successful
        '401': *ref_10
        '403': *ref_11
        '409':
          description: Category name already used
        '429': *ref_12
        '500': *ref_13
      x-code-samples:
        - lang: Shell
          source: >-
            http POST
            https://api.commander1.com/v2/REPLACE_SITEIDtms/web-datalayer-variable-categories
            \
              Authorization:'Bearer REPLACE_BEARER_TOKEN' \
              content-type:'application/vnd.api+json'
        - lang: Shell
          source: |-
            curl --request POST \
              --url https://api.commander1.com/v2/REPLACE_SITEIDtms/web-datalayer-variable-categories \
              --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \
              --header 'content-type: application/vnd.api+json'
        - lang: Node
          source: |-
            const http = require("https");

            const options = {
              "method": "POST",
              "hostname": "api.commander1.com",
              "port": null,
              "path": "/v2/REPLACE_SITEIDtms/web-datalayer-variable-categories",
              "headers": {
                "content-type": "application/vnd.api+json",
                "Authorization": "Bearer REPLACE_BEARER_TOKEN"
              }
            };

            const req = http.request(options, function (res) {
              const chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                const body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.end();
  tms/serverside-datalayer-variable-categories:
    post:
      tags:
        - TmsServersideDatalayerVariableCategories
      summary: Store server side datalayer variable categories
      operationId: TmsServersideDatalayerVariableCategoriesstore
      description: |-
        ### Usage

        Store server side datalayer variable categories
      parameters: []
      requestBody:
        required: true
        content:
          application/vnd.api+json:
            schema:
              properties:
                data:
                  type: object
                  required:
                    - type
                    - attributes
                  properties:
                    type:
                      type: string
                      enum:
                        - tms/serverside-datalayer-variable-categories
                    attributes:
                      type: object
                      required: *ref_73
                      properties: *ref_74
                      example: *ref_75
            examples:
              200.main.jsonapi:
                value:
                  data:
                    type: tms/serverside-datalayer-variable-categories
                    attributes: *ref_75
      responses:
        '200':
          content:
            application/vnd.api+json:
              schema:
                properties:
                  data:
                    type: object
                    required:
                      - type
                      - attributes
                      - id
                    properties:
                      type:
                        type: string
                        enum:
                          - tms/serverside-datalayer-variable-categories
                      attributes:
                        type: object
                        required: *ref_73
                        properties: *ref_74
                        example: *ref_75
                      id:
                        type: integer
              example:
                data:
                  type: tms/serverside-datalayer-variable-categories
                  attributes: *ref_75
                  id: 1
          description: Successful
        '401': *ref_10
        '403': *ref_11
        '409':
          description: Category name already used
        '429': *ref_12
        '500': *ref_13
      x-code-samples:
        - lang: Shell
          source: >-
            http POST
            https://api.commander1.com/v2/REPLACE_SITEIDtms/serverside-datalayer-variable-categories
            \
              Authorization:'Bearer REPLACE_BEARER_TOKEN' \
              content-type:'application/vnd.api+json'
        - lang: Shell
          source: |-
            curl --request POST \
              --url https://api.commander1.com/v2/REPLACE_SITEIDtms/serverside-datalayer-variable-categories \
              --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \
              --header 'content-type: application/vnd.api+json'
        - lang: Node
          source: |-
            const http = require("https");

            const options = {
              "method": "POST",
              "hostname": "api.commander1.com",
              "port": null,
              "path": "/v2/REPLACE_SITEIDtms/serverside-datalayer-variable-categories",
              "headers": {
                "content-type": "application/vnd.api+json",
                "Authorization": "Bearer REPLACE_BEARER_TOKEN"
              }
            };

            const req = http.request(options, function (res) {
              const chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                const body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.end();
  'tms/web-datalayer-variable-categories/{id}':
    delete:
      tags:
        - TmsWebDatalayerVariableCategories
      summary: Destroy web datalayer variable categories
      operationId: TmsWebDatalayerVariableCategoriesdestroy
      description: |-
        ### Usage

        Destroy web datalayer variable categories
      parameters:
        - *ref_14
      responses:
        '204': *ref_26
        '401': *ref_10
        '403': *ref_11
        '429': *ref_12
        '500': *ref_13
      x-code-samples:
        - lang: Shell
          source: >-
            http DELETE
            https://api.commander1.com/v2/REPLACE_SITEIDtms/web-datalayer-variable-categories/REPLACE_ID
            \
              Authorization:'Bearer REPLACE_BEARER_TOKEN'
        - lang: Shell
          source: |-
            curl --request DELETE \
              --url https://api.commander1.com/v2/REPLACE_SITEIDtms/web-datalayer-variable-categories/REPLACE_ID \
              --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'
        - lang: Node
          source: |-
            const http = require("https");

            const options = {
              "method": "DELETE",
              "hostname": "api.commander1.com",
              "port": null,
              "path": "/v2/REPLACE_SITEIDtms/web-datalayer-variable-categories/REPLACE_ID",
              "headers": {
                "Authorization": "Bearer REPLACE_BEARER_TOKEN"
              }
            };

            const req = http.request(options, function (res) {
              const chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                const body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.end();
  'tms/serverside-datalayer-variable-categories/{id}':
    delete:
      tags:
        - TmsServersideDatalayerVariableCategories
      summary: Destroy server side datalayer variable categories
      operationId: TmsServersideDatalayerVariableCategoriesdestroy
      description: |-
        ### Usage

        Destroy server side datalayer variable categories
      parameters:
        - *ref_14
      responses:
        '204': *ref_26
        '401': *ref_10
        '403': *ref_11
        '429': *ref_12
        '500': *ref_13
      x-code-samples:
        - lang: Shell
          source: >-
            http DELETE
            https://api.commander1.com/v2/REPLACE_SITEIDtms/serverside-datalayer-variable-categories/REPLACE_ID
            \
              Authorization:'Bearer REPLACE_BEARER_TOKEN'
        - lang: Shell
          source: |-
            curl --request DELETE \
              --url https://api.commander1.com/v2/REPLACE_SITEIDtms/serverside-datalayer-variable-categories/REPLACE_ID \
              --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'
        - lang: Node
          source: |-
            const http = require("https");

            const options = {
              "method": "DELETE",
              "hostname": "api.commander1.com",
              "port": null,
              "path": "/v2/REPLACE_SITEIDtms/serverside-datalayer-variable-categories/REPLACE_ID",
              "headers": {
                "Authorization": "Bearer REPLACE_BEARER_TOKEN"
              }
            };

            const req = http.request(options, function (res) {
              const chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                const body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.end();
  tms/web-containers:
    post:
      tags:
        - TmsWebContainers
      summary: Store web containers
      operationId: TmsWebContainersstore
      description: |-
        ### Usage

        Store web containers
      parameters: []
      .relationships:
        type: object
        properties:
          deployment_mailing_list:
            type: array
            description: >-
              List of users who may receive an email on container deployment
              (only used if "Email" is included in "deployment_methods"
              parameter); every listed user *MUST* have access to current
              workspace
            items: *ref_76
          user_to_report_on_tag_expiration:
            type: array
            description: >-
              List of users who will receive an email on tag expiration (only
              used if "default_tags_lifetime" is filled); every listed user
              *MUST* have access to current workspace
            items: *ref_76
      .relationshipsExample:
        deployment_mailing_list: *ref_77
        user_to_report_on_tag_expiration: *ref_77
      requestBody:
        required: true
        content:
          application/vnd.api+json:
            schema:
              properties:
                data:
                  type: object
                  required:
                    - type
                    - attributes
                  properties:
                    type:
                      type: string
                      enum:
                        - tms/web-containers
                    attributes:
                      type: object
                      required: *ref_78
                      properties: *ref_79
                      example: *ref_80
                    relationships:
                      type: object
                      properties:
                        deployment_mailing_list:
                          type: array
                          description: >-
                            List of users who may receive an email on container
                            deployment (only used if "Email" is included in
                            "deployment_methods" parameter); every listed user
                            *MUST* have access to current workspace
                          items: *ref_76
                        user_to_report_on_tag_expiration:
                          type: array
                          description: >-
                            List of users who will receive an email on tag
                            expiration (only used if "default_tags_lifetime" is
                            filled); every listed user *MUST* have access to
                            current workspace
                          items: *ref_76
            examples:
              200.main.jsonapi:
                value:
                  data:
                    type: tms/web-containers
                    attributes: *ref_80
                    relationships:
                      deployment_mailing_list: *ref_77
                      user_to_report_on_tag_expiration: *ref_77
      responses:
        '200':
          content:
            application/vnd.api+json:
              schema:
                properties:
                  data:
                    type: object
                    required:
                      - type
                      - attributes
                      - id
                    properties:
                      type:
                        type: string
                        enum:
                          - tms/web-containers
                      attributes:
                        type: object
                        required: *ref_78
                        properties: *ref_79
                        example: *ref_80
                      relationships:
                        type: object
                        properties:
                          deployment_mailing_list:
                            type: array
                            description: >-
                              List of users who may receive an email on
                              container deployment (only used if "Email" is
                              included in "deployment_methods" parameter); every
                              listed user *MUST* have access to current
                              workspace
                            items: *ref_76
                          user_to_report_on_tag_expiration:
                            type: array
                            description: >-
                              List of users who will receive an email on tag
                              expiration (only used if "default_tags_lifetime"
                              is filled); every listed user *MUST* have access
                              to current workspace
                            items: *ref_76
                      id:
                        type: integer
              example:
                data:
                  type: tms/web-containers
                  attributes: *ref_80
                  relationships:
                    deployment_mailing_list: *ref_77
                    user_to_report_on_tag_expiration: *ref_77
                  id: 1
          description: Successful
        '401': *ref_10
        '403': *ref_11
        '409':
          description: Container name already in use
        '429': *ref_12
        '500': *ref_13
      x-code-samples:
        - lang: Shell
          source: >-
            http POST
            https://api.commander1.com/v2/REPLACE_SITEIDtms/web-containers \
              Authorization:'Bearer REPLACE_BEARER_TOKEN' \
              content-type:'application/vnd.api+json'
        - lang: Shell
          source: |-
            curl --request POST \
              --url https://api.commander1.com/v2/REPLACE_SITEIDtms/web-containers \
              --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \
              --header 'content-type: application/vnd.api+json'
        - lang: Node
          source: |-
            const http = require("https");

            const options = {
              "method": "POST",
              "hostname": "api.commander1.com",
              "port": null,
              "path": "/v2/REPLACE_SITEIDtms/web-containers",
              "headers": {
                "content-type": "application/vnd.api+json",
                "Authorization": "Bearer REPLACE_BEARER_TOKEN"
              }
            };

            const req = http.request(options, function (res) {
              const chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                const body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.end();
  tms/serverside-containers:
    post:
      tags:
        - TmsServersideContainers
      summary: Store serverside containers
      operationId: TmsServersideContainersstore
      description: |-
        ### Usage

        Store serverside containers
      parameters: []
      .relationships:
        type: object
        required: []
        properties: {}
      .relationshipsExample: {}
      requestBody:
        required: true
        content:
          application/vnd.api+json:
            schema:
              properties:
                data:
                  type: object
                  required:
                    - type
                    - attributes
                  properties:
                    type:
                      type: string
                      enum:
                        - tms/serverside-containers
                    attributes:
                      type: object
                      required: *ref_81
                      properties: *ref_82
                      example: *ref_83
            examples:
              200.main.jsonapi:
                value:
                  data:
                    type: tms/serverside-containers
                    attributes: *ref_83
      responses:
        '200':
          content:
            application/vnd.api+json:
              schema:
                properties:
                  data:
                    type: object
                    required:
                      - type
                      - attributes
                      - id
                    properties:
                      type:
                        type: string
                        enum:
                          - tms/serverside-containers
                      attributes:
                        type: object
                        required: *ref_81
                        properties: *ref_82
                        example: *ref_83
                      id:
                        type: integer
              example:
                data:
                  type: tms/serverside-containers
                  attributes: *ref_83
                  id: 1
          description: Successful
        '401': *ref_10
        '403': *ref_11
        '409':
          description: Container name already in use
        '429': *ref_12
        '500': *ref_13
      x-code-samples:
        - lang: Shell
          source: >-
            http POST
            https://api.commander1.com/v2/REPLACE_SITEIDtms/serverside-containers
            \
              Authorization:'Bearer REPLACE_BEARER_TOKEN' \
              content-type:'application/vnd.api+json'
        - lang: Shell
          source: |-
            curl --request POST \
              --url https://api.commander1.com/v2/REPLACE_SITEIDtms/serverside-containers \
              --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \
              --header 'content-type: application/vnd.api+json'
        - lang: Node
          source: |-
            const http = require("https");

            const options = {
              "method": "POST",
              "hostname": "api.commander1.com",
              "port": null,
              "path": "/v2/REPLACE_SITEIDtms/serverside-containers",
              "headers": {
                "content-type": "application/vnd.api+json",
                "Authorization": "Bearer REPLACE_BEARER_TOKEN"
              }
            };

            const req = http.request(options, function (res) {
              const chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                const body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.end();
  'tms/web-containers/{id}':
    delete:
      tags:
        - TmsWebContainers
      summary: Destroy web containers
      operationId: TmsWebContainersdestroy
      description: |-
        ### Usage

        Destroy web containers
      parameters:
        - *ref_14
      responses:
        '204': *ref_26
        '401': *ref_10
        '403': *ref_11
        '429': *ref_12
        '500': *ref_13
      x-code-samples:
        - lang: Shell
          source: >-
            http DELETE
            https://api.commander1.com/v2/REPLACE_SITEIDtms/web-containers/REPLACE_ID
            \
              Authorization:'Bearer REPLACE_BEARER_TOKEN'
        - lang: Shell
          source: |-
            curl --request DELETE \
              --url https://api.commander1.com/v2/REPLACE_SITEIDtms/web-containers/REPLACE_ID \
              --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'
        - lang: Node
          source: |-
            const http = require("https");

            const options = {
              "method": "DELETE",
              "hostname": "api.commander1.com",
              "port": null,
              "path": "/v2/REPLACE_SITEIDtms/web-containers/REPLACE_ID",
              "headers": {
                "Authorization": "Bearer REPLACE_BEARER_TOKEN"
              }
            };

            const req = http.request(options, function (res) {
              const chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                const body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.end();
  'tms/serverside-containers/{id}':
    delete:
      tags:
        - TmsServersideContainers
      summary: Destroy serverside containers
      operationId: TmsServersideContainersdestroy
      description: |-
        ### Usage

        Destroy serverside containers
      parameters:
        - *ref_14
      responses:
        '204': *ref_26
        '401': *ref_10
        '403': *ref_11
        '429': *ref_12
        '500': *ref_13
      x-code-samples:
        - lang: Shell
          source: >-
            http DELETE
            https://api.commander1.com/v2/REPLACE_SITEIDtms/serverside-containers/REPLACE_ID
            \
              Authorization:'Bearer REPLACE_BEARER_TOKEN'
        - lang: Shell
          source: |-
            curl --request DELETE \
              --url https://api.commander1.com/v2/REPLACE_SITEIDtms/serverside-containers/REPLACE_ID \
              --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'
        - lang: Node
          source: |-
            const http = require("https");

            const options = {
              "method": "DELETE",
              "hostname": "api.commander1.com",
              "port": null,
              "path": "/v2/REPLACE_SITEIDtms/serverside-containers/REPLACE_ID",
              "headers": {
                "Authorization": "Bearer REPLACE_BEARER_TOKEN"
              }
            };

            const req = http.request(options, function (res) {
              const chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                const body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.end();
  tms/web-tags:
    post:
      tags:
        - TmsWebTags
      summary: Store web tags
      operationId: TmsWebTagsstore
      description: |-
        ### Usage

        Store web tags
      parameters: []
      .relationships:
        type: object
        required:
          - container
        properties:
          container: *ref_45
      .relationshipsExample:
        container: *ref_47
      requestBody:
        required: true
        content:
          application/vnd.api+json:
            schema:
              properties:
                data:
                  type: object
                  required:
                    - type
                    - attributes
                    - relationships
                  properties:
                    type:
                      type: string
                      enum:
                        - tms/web-tags
                    attributes:
                      type: object
                      required: *ref_84
                      properties: *ref_85
                      example: *ref_86
                    relationships:
                      type: object
                      required:
                        - container
                      properties:
                        container: *ref_45
            examples:
              200.main.jsonapi:
                value:
                  data:
                    type: tms/web-tags
                    attributes: *ref_86
                    relationships:
                      container: *ref_47
      responses:
        '200':
          content:
            application/vnd.api+json:
              schema:
                properties:
                  data:
                    type: object
                    required:
                      - type
                      - attributes
                      - id
                    properties:
                      type:
                        type: string
                        enum:
                          - tms/web-tags
                      attributes:
                        type: object
                        required: *ref_84
                        properties: *ref_85
                        example: *ref_86
                      relationships:
                        type: object
                        required:
                          - container
                        properties:
                          container: *ref_45
                      id:
                        type: integer
              example:
                data:
                  type: tms/web-tags
                  attributes: *ref_86
                  relationships:
                    container: *ref_47
                  id: 1
          description: Successful
        '401': *ref_10
        '403': *ref_11
        '429': *ref_12
        '500': *ref_13
      x-code-samples:
        - lang: Shell
          source: |-
            http POST https://api.commander1.com/v2/REPLACE_SITEIDtms/web-tags \
              Authorization:'Bearer REPLACE_BEARER_TOKEN' \
              content-type:'application/vnd.api+json'
        - lang: Shell
          source: |-
            curl --request POST \
              --url https://api.commander1.com/v2/REPLACE_SITEIDtms/web-tags \
              --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \
              --header 'content-type: application/vnd.api+json'
        - lang: Node
          source: |-
            const http = require("https");

            const options = {
              "method": "POST",
              "hostname": "api.commander1.com",
              "port": null,
              "path": "/v2/REPLACE_SITEIDtms/web-tags",
              "headers": {
                "content-type": "application/vnd.api+json",
                "Authorization": "Bearer REPLACE_BEARER_TOKEN"
              }
            };

            const req = http.request(options, function (res) {
              const chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                const body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.end();
  tms/serverside-tags:
    post:
      tags:
        - TmsServersideTags
      summary: Store server side tags
      operationId: TmsServersideTagsstore
      description: |-
        ### Usage

        Store server side tags
      parameters: []
      .relationships:
        type: object
        required:
          - container
        properties:
          container: *ref_56
      .relationshipsExample:
        container: *ref_59
      requestBody:
        required: true
        content:
          application/vnd.api+json:
            schema:
              properties:
                data:
                  type: object
                  required:
                    - type
                    - attributes
                    - relationships
                  properties:
                    type:
                      type: string
                      enum:
                        - tms/serverside-tags
                    attributes:
                      type: object
                      required: *ref_87
                      properties: *ref_88
                      example: *ref_89
                    relationships:
                      type: object
                      required:
                        - container
                      properties:
                        container: *ref_56
            examples:
              200.main.jsonapi:
                value:
                  data:
                    type: tms/serverside-tags
                    attributes: *ref_89
                    relationships:
                      container: *ref_59
      responses:
        '200':
          content:
            application/vnd.api+json:
              schema:
                properties:
                  data:
                    type: object
                    required:
                      - type
                      - attributes
                      - id
                    properties:
                      type:
                        type: string
                        enum:
                          - tms/serverside-tags
                      attributes:
                        type: object
                        required: *ref_87
                        properties: *ref_88
                        example: *ref_89
                      relationships:
                        type: object
                        required:
                          - container
                        properties:
                          container: *ref_56
                      id:
                        type: integer
              example:
                data:
                  type: tms/serverside-tags
                  attributes: *ref_89
                  relationships:
                    container: *ref_59
                  id: 1
          description: Successful
        '401': *ref_10
        '403': *ref_11
        '429': *ref_12
        '500': *ref_13
      x-code-samples:
        - lang: Shell
          source: >-
            http POST
            https://api.commander1.com/v2/REPLACE_SITEIDtms/serverside-tags \
              Authorization:'Bearer REPLACE_BEARER_TOKEN' \
              content-type:'application/vnd.api+json'
        - lang: Shell
          source: |-
            curl --request POST \
              --url https://api.commander1.com/v2/REPLACE_SITEIDtms/serverside-tags \
              --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \
              --header 'content-type: application/vnd.api+json'
        - lang: Node
          source: |-
            const http = require("https");

            const options = {
              "method": "POST",
              "hostname": "api.commander1.com",
              "port": null,
              "path": "/v2/REPLACE_SITEIDtms/serverside-tags",
              "headers": {
                "content-type": "application/vnd.api+json",
                "Authorization": "Bearer REPLACE_BEARER_TOKEN"
              }
            };

            const req = http.request(options, function (res) {
              const chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                const body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.end();
  'tms/web-tags/{id}':
    delete:
      tags:
        - TmsWebTags
      summary: Destroy web tags
      operationId: TmsWebTagsdestroy
      description: |-
        ### Usage

        Destroy web tags
      parameters:
        - *ref_14
      responses:
        '204': *ref_26
        '401': *ref_10
        '403': *ref_11
        '429': *ref_12
        '500': *ref_13
      x-code-samples:
        - lang: Shell
          source: >-
            http DELETE
            https://api.commander1.com/v2/REPLACE_SITEIDtms/web-tags/REPLACE_ID
            \
              Authorization:'Bearer REPLACE_BEARER_TOKEN'
        - lang: Shell
          source: |-
            curl --request DELETE \
              --url https://api.commander1.com/v2/REPLACE_SITEIDtms/web-tags/REPLACE_ID \
              --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'
        - lang: Node
          source: |-
            const http = require("https");

            const options = {
              "method": "DELETE",
              "hostname": "api.commander1.com",
              "port": null,
              "path": "/v2/REPLACE_SITEIDtms/web-tags/REPLACE_ID",
              "headers": {
                "Authorization": "Bearer REPLACE_BEARER_TOKEN"
              }
            };

            const req = http.request(options, function (res) {
              const chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                const body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.end();
  'tms/serverside-tags/{id}':
    delete:
      tags:
        - TmsServersideTags
      summary: Destroy serverside tags
      operationId: TmsServersideTagsdestroy
      description: |-
        ### Usage

        Destroy serverside tags
      parameters:
        - *ref_14
      responses:
        '204': *ref_26
        '401': *ref_10
        '403': *ref_11
        '429': *ref_12
        '500': *ref_13
      x-code-samples:
        - lang: Shell
          source: >-
            http DELETE
            https://api.commander1.com/v2/REPLACE_SITEIDtms/serverside-tags/REPLACE_ID
            \
              Authorization:'Bearer REPLACE_BEARER_TOKEN'
        - lang: Shell
          source: |-
            curl --request DELETE \
              --url https://api.commander1.com/v2/REPLACE_SITEIDtms/serverside-tags/REPLACE_ID \
              --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'
        - lang: Node
          source: |-
            const http = require("https");

            const options = {
              "method": "DELETE",
              "hostname": "api.commander1.com",
              "port": null,
              "path": "/v2/REPLACE_SITEIDtms/serverside-tags/REPLACE_ID",
              "headers": {
                "Authorization": "Bearer REPLACE_BEARER_TOKEN"
              }
            };

            const req = http.request(options, function (res) {
              const chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                const body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.end();
  integrations:
    get:
      tags:
        - PlatformIntegrations
      summary: '\[DRAFT\] List integrations'
      operationId: PlatformIntegrationsindex
      description: |-
        ### Usage

        List integrations
      parameters: []
      responses:
        '200':
          content:
            application/vnd.api+json:
              schema:
                properties:
                  data:
                    type: object
                    required:
                      - id
                      - type
                      - attributes
                    properties:
                      id:
                        type: integer
                      type:
                        type: string
                        enum:
                          - platform/integrations
                      attributes:
                        type: object
                        required: *ref_90
                        properties: *ref_91
                        example: *ref_92
              example:
                data:
                  id: 1
                  type: platform/integrations
                  attributes: *ref_92
          description: Successful
        '401': *ref_10
        '403': *ref_11
        '429': *ref_12
        '500': *ref_13
      x-code-samples:
        - lang: Shell
          source: |-
            http GET https://api.commander1.com/v2/REPLACE_SITEIDintegrations \
              Authorization:'Bearer REPLACE_BEARER_TOKEN'
        - lang: Shell
          source: |-
            curl --request GET \
              --url https://api.commander1.com/v2/REPLACE_SITEIDintegrations \
              --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'
        - lang: Node
          source: |-
            const http = require("https");

            const options = {
              "method": "GET",
              "hostname": "api.commander1.com",
              "port": null,
              "path": "/v2/REPLACE_SITEIDintegrations",
              "headers": {
                "Authorization": "Bearer REPLACE_BEARER_TOKEN"
              }
            };

            const req = http.request(options, function (res) {
              const chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                const body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.end();
    post:
      tags:
        - PlatformIntegrations
      summary: '\[DRAFT\] Store integrations'
      operationId: PlatformIntegrationsstore
      description: |-
        ### Usage

        Store integrations
      parameters: []
      .relationships:
        type: object
        required: []
        properties:
          connected_integrations: *ref_93
      .relationshipsExample:
        connected_integrations: *ref_94
      requestBody:
        required: true
        content:
          application/vnd.api+json:
            schema:
              properties:
                data:
                  type: object
                  required:
                    - type
                    - attributes
                  properties:
                    type:
                      type: string
                      enum:
                        - platform/integrations
                    attributes:
                      type: object
                      required: *ref_90
                      properties: *ref_91
                      example: *ref_92
                    relationships:
                      type: object
                      required: []
                      properties:
                        connected_integrations: *ref_93
            examples:
              200.main.jsonapi:
                value:
                  data:
                    type: platform/integrations
                    attributes: *ref_92
                    relationships:
                      connected_integrations: *ref_94
      responses:
        '200':
          content:
            application/vnd.api+json:
              schema:
                properties:
                  data:
                    type: object
                    required:
                      - type
                      - attributes
                      - id
                    properties:
                      type:
                        type: string
                        enum:
                          - platform/integrations
                      attributes:
                        type: object
                        required: *ref_90
                        properties: *ref_91
                        example: *ref_92
                      relationships:
                        type: object
                        required: []
                        properties:
                          connected_integrations: *ref_93
                      id:
                        type: integer
              example:
                data:
                  type: platform/integrations
                  attributes: *ref_92
                  relationships:
                    connected_integrations: *ref_94
                  id: 1
          description: Successful
        '401': *ref_10
        '403': *ref_11
        '429': *ref_12
        '500': *ref_13
      x-code-samples:
        - lang: Shell
          source: |-
            http POST https://api.commander1.com/v2/REPLACE_SITEIDintegrations \
              Authorization:'Bearer REPLACE_BEARER_TOKEN' \
              content-type:'application/vnd.api+json'
        - lang: Shell
          source: |-
            curl --request POST \
              --url https://api.commander1.com/v2/REPLACE_SITEIDintegrations \
              --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \
              --header 'content-type: application/vnd.api+json'
        - lang: Node
          source: |-
            const http = require("https");

            const options = {
              "method": "POST",
              "hostname": "api.commander1.com",
              "port": null,
              "path": "/v2/REPLACE_SITEIDintegrations",
              "headers": {
                "content-type": "application/vnd.api+json",
                "Authorization": "Bearer REPLACE_BEARER_TOKEN"
              }
            };

            const req = http.request(options, function (res) {
              const chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                const body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.end();
  integration-templates:
    get:
      tags:
        - PlatformIntegrationTemplates
      summary: Index integration templates
      operationId: PlatformIntegrationTemplatesindex
      description: |-
        ### Usage

        Index integration templates
      parameters: []
      .relationships:
        type: object
        properties:
          categories:
            items: *ref_95
      .relationshipsExample:
        categories: *ref_96
      responses:
        '200':
          content:
            application/vnd.api+json:
              schema:
                properties:
                  data:
                    type: object
                    required:
                      - type
                      - attributes
                      - id
                    properties:
                      type:
                        type: string
                        enum:
                          - integration-template
                      attributes:
                        type: object
                        required: *ref_97
                        properties: *ref_98
                        example: *ref_99
                      relationships:
                        type: object
                        properties:
                          categories:
                            items: *ref_95
                      id:
                        type: string
                  included:
                    type: array
                    items:
                      required:
                        - type
                        - attributes
                        - id
                      properties:
                        type:
                          type: string
                          enum:
                            - integration-category
                        attributes:
                          type: object
                          required: *ref_100
                          properties: *ref_101
                          example: *ref_102
                        id:
                          type: string
              example:
                data:
                  type: integration-template
                  attributes: *ref_99
                  relationships:
                    categories: *ref_96
                  id: '1'
                included:
                  type: object
                  label: My category
                  position: 1
                  types: *ref_103
          description: Successful
        '401': *ref_10
        '403': *ref_11
        '429': *ref_12
        '500': *ref_13
      x-code-samples:
        - lang: Shell
          source: >-
            http GET
            https://api.commander1.com/v2/REPLACE_SITEIDintegration-templates \
              Authorization:'Bearer REPLACE_BEARER_TOKEN'
        - lang: Shell
          source: |-
            curl --request GET \
              --url https://api.commander1.com/v2/REPLACE_SITEIDintegration-templates \
              --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'
        - lang: Node
          source: |-
            const http = require("https");

            const options = {
              "method": "GET",
              "hostname": "api.commander1.com",
              "port": null,
              "path": "/v2/REPLACE_SITEIDintegration-templates",
              "headers": {
                "Authorization": "Bearer REPLACE_BEARER_TOKEN"
              }
            };

            const req = http.request(options, function (res) {
              const chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                const body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.end();
  integration-categories:
    get:
      tags:
        - PlatformIntegrationCategories
      summary: Index integration categories
      operationId: PlatformIntegrationCategoriesindex
      description: |-
        ### Usage

        Index integration categories
      parameters: []
      .relationships:
        type: object
        properties:
          templates:
            items: *ref_104
      .relationshipsExample:
        templates: *ref_105
      responses:
        '200':
          content:
            application/vnd.api+json:
              schema:
                properties:
                  data:
                    type: object
                    required:
                      - type
                      - attributes
                      - id
                    properties:
                      type:
                        type: string
                        enum:
                          - integration-category
                      attributes:
                        type: object
                        required: *ref_100
                        properties: *ref_101
                        example: *ref_102
                      relationships:
                        type: object
                        properties:
                          templates:
                            items: *ref_104
                      id:
                        type: string
                  included:
                    type: object
              example:
                data:
                  type: integration-category
                  attributes: *ref_102
                  relationships:
                    templates: *ref_105
                  id: '1'
          description: Successful
        '401': *ref_10
        '403': *ref_11
        '429': *ref_12
        '500': *ref_13
      x-code-samples:
        - lang: Shell
          source: >-
            http GET
            https://api.commander1.com/v2/REPLACE_SITEIDintegration-categories \
              Authorization:'Bearer REPLACE_BEARER_TOKEN'
        - lang: Shell
          source: |-
            curl --request GET \
              --url https://api.commander1.com/v2/REPLACE_SITEIDintegration-categories \
              --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'
        - lang: Node
          source: |-
            const http = require("https");

            const options = {
              "method": "GET",
              "hostname": "api.commander1.com",
              "port": null,
              "path": "/v2/REPLACE_SITEIDintegration-categories",
              "headers": {
                "Authorization": "Bearer REPLACE_BEARER_TOKEN"
              }
            };

            const req = http.request(options, function (res) {
              const chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                const body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.end();
  destination-categories:
    get:
      tags:
        - PlatformDestinationCategories
      summary: Index destination categories
      operationId: PlatformDestinationCategoriesindex
      description: |-
        ### Usage

        Index destination categories
      parameters: []
      .relationships:
        type: object
        properties:
          templates:
            items: *ref_104
      .relationshipsExample:
        templates: *ref_105
      responses:
        '200':
          content:
            application/vnd.api+json:
              schema:
                properties:
                  data:
                    type: object
                    required:
                      - type
                      - attributes
                      - id
                    properties:
                      type:
                        type: string
                        enum:
                          - destination-category
                      attributes:
                        type: object
                        required: *ref_100
                        properties: *ref_101
                        example: *ref_102
                      relationships:
                        type: object
                        properties:
                          templates:
                            items: *ref_104
                      id:
                        type: string
                  included:
                    type: object
              example:
                data:
                  type: destination-category
                  attributes: *ref_102
                  relationships:
                    templates: *ref_105
                  id: '1'
          description: Successful
        '401': *ref_10
        '403': *ref_11
        '429': *ref_12
        '500': *ref_13
      x-code-samples:
        - lang: Shell
          source: >-
            http GET
            https://api.commander1.com/v2/REPLACE_SITEIDdestination-categories \
              Authorization:'Bearer REPLACE_BEARER_TOKEN'
        - lang: Shell
          source: |-
            curl --request GET \
              --url https://api.commander1.com/v2/REPLACE_SITEIDdestination-categories \
              --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'
        - lang: Node
          source: |-
            const http = require("https");

            const options = {
              "method": "GET",
              "hostname": "api.commander1.com",
              "port": null,
              "path": "/v2/REPLACE_SITEIDdestination-categories",
              "headers": {
                "Authorization": "Bearer REPLACE_BEARER_TOKEN"
              }
            };

            const req = http.request(options, function (res) {
              const chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                const body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.end();
  source-categories:
    get:
      tags:
        - PlatformSourceCategories
      summary: Index source categories
      operationId: PlatformSourceCategoriesindex
      description: |-
        ### Usage

        Index source categories
      parameters: []
      .relationships:
        type: object
        properties:
          templates:
            items: *ref_104
      .relationshipsExample:
        templates: *ref_105
      responses:
        '200':
          content:
            application/vnd.api+json:
              schema:
                properties:
                  data:
                    type: object
                    required:
                      - type
                      - attributes
                      - id
                    properties:
                      type:
                        type: string
                        enum:
                          - source-category
                      attributes:
                        type: object
                        required: *ref_100
                        properties: *ref_101
                        example: *ref_102
                      relationships:
                        type: object
                        properties:
                          templates:
                            items: *ref_104
                      id:
                        type: string
                  included:
                    type: object
              example:
                data:
                  type: source-category
                  attributes: *ref_102
                  relationships:
                    templates: *ref_105
                  id: '1'
          description: Successful
        '401': *ref_10
        '403': *ref_11
        '429': *ref_12
        '500': *ref_13
      x-code-samples:
        - lang: Shell
          source: >-
            http GET
            https://api.commander1.com/v2/REPLACE_SITEIDsource-categories \
              Authorization:'Bearer REPLACE_BEARER_TOKEN'
        - lang: Shell
          source: |-
            curl --request GET \
              --url https://api.commander1.com/v2/REPLACE_SITEIDsource-categories \
              --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'
        - lang: Node
          source: |-
            const http = require("https");

            const options = {
              "method": "GET",
              "hostname": "api.commander1.com",
              "port": null,
              "path": "/v2/REPLACE_SITEIDsource-categories",
              "headers": {
                "Authorization": "Bearer REPLACE_BEARER_TOKEN"
              }
            };

            const req = http.request(options, function (res) {
              const chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                const body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.end();
  destination-templates:
    get:
      tags:
        - PlatformDestinationTemplates
      summary: Index destination templates
      operationId: PlatformDestinationTemplatesindex
      description: |-
        ### Usage

        Index destination templates
      parameters: []
      .relationships:
        type: object
        properties:
          categories:
            items: *ref_95
      .relationshipsExample:
        categories: *ref_96
      responses:
        '200':
          content:
            application/vnd.api+json:
              schema:
                properties:
                  data:
                    type: object
                    required:
                      - type
                      - attributes
                      - id
                    properties:
                      type:
                        type: string
                        enum:
                          - destination-template
                      attributes:
                        type: object
                        required: *ref_97
                        properties: *ref_98
                        example: *ref_99
                      relationships:
                        type: object
                        properties:
                          categories:
                            items: *ref_95
                      id:
                        type: string
                  included:
                    type: array
                    items:
                      required:
                        - type
                        - attributes
                        - id
                      properties:
                        type:
                          type: string
                          enum:
                            - integration-category
                        attributes:
                          type: object
                          required: *ref_100
                          properties: *ref_101
                          example: *ref_102
                        id:
                          type: string
              example:
                data:
                  type: destination-template
                  attributes: *ref_99
                  relationships:
                    categories: *ref_96
                  id: '1'
                included:
                  type: object
                  label: My category
                  position: 1
                  types: *ref_103
          description: Successful
        '401': *ref_10
        '403': *ref_11
        '429': *ref_12
        '500': *ref_13
      x-code-samples:
        - lang: Shell
          source: >-
            http GET
            https://api.commander1.com/v2/REPLACE_SITEIDdestination-templates \
              Authorization:'Bearer REPLACE_BEARER_TOKEN'
        - lang: Shell
          source: |-
            curl --request GET \
              --url https://api.commander1.com/v2/REPLACE_SITEIDdestination-templates \
              --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'
        - lang: Node
          source: |-
            const http = require("https");

            const options = {
              "method": "GET",
              "hostname": "api.commander1.com",
              "port": null,
              "path": "/v2/REPLACE_SITEIDdestination-templates",
              "headers": {
                "Authorization": "Bearer REPLACE_BEARER_TOKEN"
              }
            };

            const req = http.request(options, function (res) {
              const chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                const body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.end();
  source-templates:
    get:
      tags:
        - PlatformSourceTemplates
      summary: Index source templates
      operationId: PlatformSourceTemplatesindex
      description: |-
        ### Usage

        Index source templates
      parameters: []
      .relationships:
        type: object
        properties:
          categories:
            items: *ref_95
      .relationshipsExample:
        categories: *ref_96
      responses:
        '200':
          content:
            application/vnd.api+json:
              schema:
                properties:
                  data:
                    type: object
                    required:
                      - type
                      - attributes
                      - id
                    properties:
                      type:
                        type: string
                        enum:
                          - source-template
                      attributes:
                        type: object
                        required: *ref_97
                        properties: *ref_98
                        example: *ref_99
                      relationships:
                        type: object
                        properties:
                          categories:
                            items: *ref_95
                      id:
                        type: string
                  included:
                    type: array
                    items:
                      required:
                        - type
                        - attributes
                        - id
                      properties:
                        type:
                          type: string
                          enum:
                            - integration-category
                        attributes:
                          type: object
                          required: *ref_100
                          properties: *ref_101
                          example: *ref_102
                        id:
                          type: string
              example:
                data:
                  type: source-template
                  attributes: *ref_99
                  relationships:
                    categories: *ref_96
                  id: '1'
                included:
                  type: object
                  label: My category
                  position: 1
                  types: *ref_103
          description: Successful
        '401': *ref_10
        '403': *ref_11
        '429': *ref_12
        '500': *ref_13
      x-code-samples:
        - lang: Shell
          source: >-
            http GET
            https://api.commander1.com/v2/REPLACE_SITEIDsource-templates \
              Authorization:'Bearer REPLACE_BEARER_TOKEN'
        - lang: Shell
          source: |-
            curl --request GET \
              --url https://api.commander1.com/v2/REPLACE_SITEIDsource-templates \
              --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'
        - lang: Node
          source: |-
            const http = require("https");

            const options = {
              "method": "GET",
              "hostname": "api.commander1.com",
              "port": null,
              "path": "/v2/REPLACE_SITEIDsource-templates",
              "headers": {
                "Authorization": "Bearer REPLACE_BEARER_TOKEN"
              }
            };

            const req = http.request(options, function (res) {
              const chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                const body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.end();
  integration/requests:
    post:
      tags:
        - PlatformIntegrationRequests
      summary: Store request integrations
      operationId: PlatformIntegrationRequestsstore
      description: |-
        ### Usage

        Store request integrations
      parameters: []
      requestBody:
        required: true
        content:
          application/vnd.api+json:
            schema:
              properties:
                data:
                  type: object
                  required:
                    - type
                    - attributes
                  properties:
                    type:
                      type: string
                      enum:
                        - integration/requests
                    attributes:
                      type: object
                      required: *ref_106
                      properties: *ref_107
                      example: *ref_108
            examples:
              200.main.jsonapi:
                value:
                  data:
                    type: integration/requests
                    attributes: *ref_108
      responses:
        '200':
          content:
            application/vnd.api+json:
              schema:
                properties:
                  data:
                    type: object
                    required:
                      - type
                      - id
                    properties:
                      type:
                        type: string
                        enum:
                          - integration/requests
                      id:
                        type: string
                        enum:
                          - '1'
              example:
                data:
                  type: integration/requests
                  id: '1'
          description: Successful
        '401': *ref_10
        '403': *ref_11
        '429': *ref_12
        '500': *ref_13
      x-code-samples:
        - lang: Shell
          source: >-
            http POST
            https://api.commander1.com/v2/REPLACE_SITEIDintegration/requests \
              Authorization:'Bearer REPLACE_BEARER_TOKEN' \
              content-type:'application/vnd.api+json'
        - lang: Shell
          source: |-
            curl --request POST \
              --url https://api.commander1.com/v2/REPLACE_SITEIDintegration/requests \
              --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \
              --header 'content-type: application/vnd.api+json'
        - lang: Node
          source: |-
            const http = require("https");

            const options = {
              "method": "POST",
              "hostname": "api.commander1.com",
              "port": null,
              "path": "/v2/REPLACE_SITEIDintegration/requests",
              "headers": {
                "content-type": "application/vnd.api+json",
                "Authorization": "Bearer REPLACE_BEARER_TOKEN"
              }
            };

            const req = http.request(options, function (res) {
              const chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                const body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.end();
security:
  - UserAuthentication: []
tags:
  - name: DmsConversions
    x-displayName: Conversion
    description: |
      <object-description schemaRef="#/components/schemas/DmsConversion" />
  - name: DmsProducts
    x-displayName: Product
    description: |
      <object-description schemaRef="#/components/schemas/DmsProduct" />
  - name: DmsUniverses
    x-displayName: Universe
  - name: TmsWebDatalayerVariables
    x-displayName: Web Datalayer Variables
  - name: TmsWebInternalVariables
    x-displayName: Web Internal Variables
  - name: TmsServersideDatalayerVariables
    x-displayName: Serverside Datalayer Variables
  - name: TmsServersideInternalVariables
    x-displayName: Serverside Internal Variables
  - name: TmsWebTriggers
    x-displayName: Web Triggers
  - name: PrivacyStatistics
    x-displayName: Statistics
  - name: DmsConversionModel
    x-displayName: Conversion
    description: |
      <object-description schemaRef="#/components/schemas/DmsConversion" />
  - name: DmsConversionItemModel
    x-displayName: Conversion Item
    description: |
      <object-description schemaRef="#/components/schemas/DmsConversionItem" />
  - name: DmsProductModel
    x-displayName: Product
    description: |
      <object-description schemaRef="#/components/schemas/DmsProduct" />
  - name: DmsUniverseModel
    x-displayName: Universe
    description: |
      <object-description schemaRef="#/components/schemas/DmsUniverse" />
  - name: DmsAddressModel
    x-displayName: Address
    description: |
      <object-description schemaRef="#/components/schemas/DmsAddress" />
  - name: AmsUniverseModel
    x-displayName: Universe
    description: |
      <object-description schemaRef="#/components/schemas/AmsUniverse" />
  - name: TmsWebDatalayerVariablesModel
    x-displayName: Web Datalayer Variables
    description: >
      <object-description
      schemaRef="#/components/schemas/TmsWebDatalayerVariables" />
  - name: TmsWebInternalVariablesModel
    x-displayName: Web Internal Variables
    description: >
      <object-description
      schemaRef="#/components/schemas/TmsWebInternalVariables" />
  - name: TmsServersideDatalayerVariablesModel
    x-displayName: Serverside Datalayer Variables
    description: >
      <object-description
      schemaRef="#/components/schemas/TmsServersideDatalayerVariables" />
  - name: TmsServersideInternalVariablesModel
    x-displayName: Serverside Internal Variables
    description: >
      <object-description
      schemaRef="#/components/schemas/TmsServersideInternalVariables" />
  - name: TmsWebTriggersModel
    x-displayName: Web Triggers
    description: |
      <object-description schemaRef="#/components/schemas/TmsWebTriggers" />
  - name: TmsWebPerimeters
    x-displayName: Web Perimeters
    description: |
      <object-description schemaRef="#/components/schemas/TmsWebPerimeters" />
  - name: TmsWebPerimetersModel
    x-displayName: Web Perimeters
    description: |
      <object-description schemaRef="#/components/schemas/TmsWebPerimeters" />
  - name: TmsWebConstraints
    x-displayName: Web Constraints
    description: |
      <object-description schemaRef="#/components/schemas/TmsWebConstraints" />
  - name: TmsWebConstraintsModel
    x-displayName: Web Constraints
    description: |
      <object-description schemaRef="#/components/schemas/TmsWebConstraints" />
  - name: TmsServersideConstraints
    x-displayName: Serverside Constraints
    description: >
      <object-description
      schemaRef="#/components/schemas/TmsServersideConstraints" />
  - name: TmsServersideConstraintsModel
    x-displayName: Serverside Constraints
    description: >
      <object-description
      schemaRef="#/components/schemas/TmsServersideConstraints" />
  - name: AdminWorkspace
    x-displayName: Workspace
    description: |
      <object-description schemaRef="#/components/schemas/AdminWorkspace" />
  - name: AdminWorkspaceModel
    x-displayName: Workspace
    description: |
      <object-description schemaRef="#/components/schemas/AdminWorkspace" />
  - name: TmsWebDatalayerVariableCategories
    x-displayName: Web Datalayer Variable Categories
    description: >
      <object-description
      schemaRef="#/components/schemas/TmsWebDatalayerVariableCategories" />
  - name: TmsWebDatalayerVariableCategoriesModel
    x-displayName: Web Datalayer Variable Categories
    description: >
      <object-description
      schemaRef="#/components/schemas/TmsWebDatalayerVariableCategories" />
  - name: TmsServersideDatalayerVariableCategories
    x-displayName: Serverside Datalayer Variable Categories
    description: >
      <object-description
      schemaRef="#/components/schemas/TmsServersideDatalayerVariableCategories"
      />
  - name: TmsServersideDatalayerVariableCategoriesModel
    x-displayName: Serverside Datalayer Variable Categories
    description: >
      <object-description
      schemaRef="#/components/schemas/TmsServersideDatalayerVariableCategories"
      />
  - name: TmsWebContainers
    x-displayName: Web Containers
    description: |
      <object-description schemaRef="#/components/schemas/TmsWebContainers" />
  - name: TmsWebContainersModel
    x-displayName: Web Containers
    description: |
      <object-description schemaRef="#/components/schemas/TmsWebContainers" />
  - name: TmsServersideContainers
    x-displayName: Serverside Containers
    description: >
      <object-description
      schemaRef="#/components/schemas/TmsServersideContainers" />
  - name: TmsServersideContainersModel
    x-displayName: Serverside Containers
    description: >
      <object-description
      schemaRef="#/components/schemas/TmsServersideContainers" />
  - name: TmsWebTags
    x-displayName: Web Tags
    description: |
      <object-description schemaRef="#/components/schemas/TmsWebTags" />
  - name: TmsWebTagsModel
    x-displayName: Web Tags
    description: |
      <object-description schemaRef="#/components/schemas/TmsWebTags" />
  - name: TmsServersideTags
    x-displayName: Serverside Tags
    description: |
      <object-description schemaRef="#/components/schemas/TmsServersideTags" />
  - name: TmsServersideTagsModel
    x-displayName: Serverside Tags
    description: |
      <object-description schemaRef="#/components/schemas/TmsServersideTags" />
  - name: PlatformIntegrations
    x-displayName: Integrations
    description: >
      <object-description schemaRef="#/components/schemas/PlatformIntegrations"
      />
  - name: PlatformIntegrationsModel
    x-displayName: Integrations
    description: >
      <object-description schemaRef="#/components/schemas/PlatformIntegrations"
      />
  - name: PlatformIntegrationTemplates
    x-displayName: Integration Templates
    description: >
      <object-description
      schemaRef="#/components/schemas/PlatformIntegrationTemplates" />
  - name: PlatformIntegrationTemplatesModel
    x-displayName: Integration Templates
    description: >
      <object-description
      schemaRef="#/components/schemas/PlatformIntegrationTemplates" />
  - name: PlatformIntegrationCategories
    x-displayName: Integration Categories
    description: >
      <object-description
      schemaRef="#/components/schemas/PlatformIntegrationCategories" />
  - name: PlatformIntegrationCategoriesModel
    x-displayName: Integration Categories
    description: >
      <object-description
      schemaRef="#/components/schemas/PlatformIntegrationCategories" />
  - name: PlatformDestinationCategories
    x-displayName: Destination Categories
    description: >
      <object-description
      schemaRef="#/components/schemas/PlatformIntegrationCategories" />
  - name: PlatformDestinationCategoriesModel
    x-displayName: Destination Categories
    description: >
      <object-description
      schemaRef="#/components/schemas/PlatformIntegrationCategories" />
  - name: PlatformSourceCategories
    x-displayName: Source Categories
    description: >
      <object-description
      schemaRef="#/components/schemas/PlatformIntegrationCategories" />
  - name: PlatformSourceCategoriesModel
    x-displayName: Source Categories
    description: >
      <object-description
      schemaRef="#/components/schemas/PlatformIntegrationCategories" />
  - name: PlatformDestinationTemplates
    x-displayName: Destination Templates
    description: >
      <object-description
      schemaRef="#/components/schemas/PlatformIntegrationTemplates" />
  - name: PlatformDestinationTemplatesModel
    x-displayName: Destination Templates
    description: >
      <object-description
      schemaRef="#/components/schemas/PlatformIntegrationTemplates" />
  - name: PlatformSourceTemplates
    x-displayName: Source Templates
    description: >
      <object-description
      schemaRef="#/components/schemas/PlatformIntegrationTemplates" />
  - name: PlatformSourceTemplatesModel
    x-displayName: Source Templates
    description: >
      <object-description
      schemaRef="#/components/schemas/PlatformIntegrationTemplates" />
  - name: PlatformIntegrationRequests
    x-displayName: Integration Requests
    description: >
      <object-description
      schemaRef="#/components/schemas/PlatformIntegrationRequests" />
  - name: PlatformIntegrationRequestsModel
    x-displayName: Integration Requests
    description: >
      <object-description
      schemaRef="#/components/schemas/PlatformIntegrationRequests" />
x-tagGroups:
  - name: Mix
    tags:
      - AmsReport
      - AmsUser
      - AmsUniverse
  - name: Data
    tags:
      - DmsUniverses
      - DmsProducts
      - DmsConversions
  - name: Tag
    tags:
      - TmsServersideDatalayerVariableCategories
      - TmsServersideDatalayerVariables
      - TmsServersideInternalVariables
      - TmsServersideConstraints
      - TmsServersideContainers
      - TmsServersideTags
      - TmsWebConstraints
      - TmsWebDatalayerVariableCategories
      - TmsWebContainers
      - TmsWebDatalayerVariables
      - TmsWebInternalVariables
      - TmsWebPerimeters
      - TmsWebTags
      - TmsWebTriggers
  - name: Privacy
    tags:
      - PrivacyStatistics
  - name: Monitoring
    tags:
      - Streams Live
  - name: Data Model Definitions
    tags:
      - DmsConversionModel
      - DmsConversionItemModel
      - DmsProductModel
      - DmsAddressModel
      - DmsUniverseModel
  - name: Mix Model Definitions
    tags:
      - AmsUniverseModel
  - name: Tag Model Definitions
    tags:
      - TmsServersideDatalayerVariableCategoriesModel
      - TmsServersideDatalayerVariablesModel
      - TmsServersideInternalVariablesModel
      - TmsServersideTagsModel
      - TmsServersideConstraintsModel
      - TmsServersideContainersModel
      - TmsWebConstraintsModel
      - TmsWebDatalayerVariableCategoriesModel
      - TmsWebContainersModel
      - TmsWebDatalayerVariablesModel
      - TmsWebInternalVariablesModel
      - TmsWebPerimetersModel
      - TmsWebTagsModel
      - TmsWebTriggersModel
  - name: Admin
    tags:
      - AdminWorkspace
  - name: Admin Model Definitions
    tags:
      - AdminWorkspaceModel
  - name: Platform
    tags:
      - PlatformIntegrations
      - PlatformDestinationCategories
      - PlatformDestinationTemplates
      - PlatformIntegrationCategories
      - PlatformIntegrationRequests
      - PlatformIntegrationTemplates
      - PlatformSourceCategories
      - PlatformSourceTemplates
  - name: Platform Model Definitions
    tags:
      - PlatformIntegrationsModel
      - PlatformDestinationCategoriesModel
      - PlatformDestinationTemplatesModel
      - PlatformIntegrationCategoriesModel
      - PlatformIntegrationRequestsModel
      - PlatformIntegrationTemplatesModel
      - PlatformSourceCategoriesModel
      - PlatformSourceTemplatesModel
